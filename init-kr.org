#+title: DotEmacs
#+author: Krdzo
#+startup: fold

* Introduction
This config is primarily inspired from [[https://www.lucacambiaghi.com/vanilla-emacs/readme.html#h:16B948EA-5375-44DE-ACD7-3664D4A9CE5F][here]] and most of this is directly taken from there.

* Bootstrap straight.el

I'm using straight in combination with use-package for package management.

Some rules/conventions:
- Prefer ~:init~ to ~:custom~. Prefer multiple ~setq~ expressions to one.
- Default to ~:defer t~, use ~:demand~ to force loading
- When packages do not require installation e.g. ~dired~, we need ~:straight (:type built-in)~
- If you specify ~:commands~, they will be autoloaded and the package will be loaded when the commands are first executed
    + If you use ~:general~ and bind commands to keys it will automatically load the package on first invokation

NOTE: if you change a package recipe from ~melpa~ to ~github~ in a ~use-package~
block but that package is used as a dependency is used in a previous
~use-package~ block with a ~melpa~ recipe, you will get a warning. Just make
sure to declare the "base" package with the ~github~ recipe first.

NOTE: for ~straight-cache-autoloads~ you must run ~straight-prune-build~ ocaisonaly so that you keep you straight config clean.
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
  (setq straight-vc-git-default-clone-depth 1)
  (setq straight-recipes-gnu-elpa-use-mirror t)
  (setq straight-check-for-modifications '(check-on-save find-when-checking))
  (defvar bootstrap-version)
  (let* ((straight-repo-dir
          (expand-file-name "straight/repos" user-emacs-directory))
         (bootstrap-file
          (concat straight-repo-dir "/straight.el/bootstrap.el"))
         (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (shell-command
       (concat
        "mkdir -p " straight-repo-dir " && "
        "git -C " straight-repo-dir " clone "
        "https://github.com/raxod502/straight.el.git && "
        "git -C " straight-repo-dir " checkout 2d407bc")))
    (load bootstrap-file nil 'nomessage))
  ;; install use-package
  (straight-use-package 'use-package)
  ;; This is a variable that has been renamed but straight still refers when
  ;; doing :sraight (:no-native-compile t)
  ;; (setq comp-deferred-compilation-black-list nil)
#+end_src
** COMMENT Enable use-package statistics
If you'd like to see how many packages you've loaded, what stage of
initialization they've reached, and how much aggregate time they've spent
(roughly), you can enable ~use-package-compute-statistics~ after loading
use-package but before any use-package forms, and then run the command M-x
~use-package-report~ to see the results. The buffer displayed is a tabulated
list. You can use S in a column to sort the rows based on it.

#+BEGIN_SRC emacs-lisp
  (setq use-package-compute-statistics t)
  (global-set-key (kbd "C-x M-q") 'use-package-report)
#+END_SRC

* General.el
For uniform keybinding.
In this block we load ~general~ and define bindings for generic commands e.g. ~find-file~.
The commands provided by packages should be binded in the ~use-package~ block,
thanks to the ~:general~ keyword.
NOTE: We need to load ~general~ before everything else because we want to use
for every keybinding and in ~use-package~ blocks.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :demand t
    :config
    (general-evil-setup)

    ;; leaders for general
    (general-create-definer kr/leader-keys
      :states '(normal visual)
      :keymaps 'override
      :prefix "SPC")

   (kr/leader-keys
      "<escape>" 'keyboard-escape-quit

      "b" '(:ignore t :which-key "buffer")
      "br" 'revert-buffer
      "bd" 'kill-current-buffer
      "bs" '((lambda () (interactive)
               (switch-to-buffer "*scratch*"))
             :wk "scratch")

      "f" '(:ignore t :which-key "file")
      "ff" 'find-file
      "fs" 'save-buffer
      "fD" 'dired-jump
      "fS" 'write-file

      "t"  '(:ignore t :which-key "toggle")
      "td" '(toggle-debug-on-error :which-key "debug on error")
      "tl" '(display-line-numbers-mode :wk "line numbers")
      "tw" '(toggle-truncate-lines :wk "word wrap")

      "u" '(universal-argument :wk "universal")

      "w" '(:ignore t :which-key "window")
      "wl" 'windmove-right
      "wh" 'windmove-left
      "wk" 'windmove-up
      "wj" 'windmove-down
      "wd" 'delete-window
      "wv" 'evil-window-vsplit
      "ws" 'evil-window-split
      "w=" 'balance-windows-area
      "wD" 'kill-buffer-and-window
      ;; "wu" 'winner-undo
      ;; "wr" 'winner-redo
      "wo" '(delete-other-windows :wk "maximize"))

    ;; changing some emacs default bindings to something usefull
   (general-def
     "C-h l" 'find-library))
#+END_SRC

* Emacs
Here is configuration that concerns Emacs builtin options, ether changing the
default options or installing packages that enhance some core Emacs features,
like for example changing the help system with helpful package.

** Measuring start-up
So I know how many dreadful seconds it took.

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (emacs-init-time)
                     gcs-done)))
#+end_src

** Sane defaults

Inspired by https://github.com/natecox/dotfiles/blob/master/emacs/emacs.d/nathancox.org

To debug a LISP function use ~debug-on-entry~. You step /in/ with =d= and /over/ with =e=

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :init
    (setq initial-scratch-message nil
          sentence-end-double-space nil
          ring-bell-function 'ignore
          frame-resize-pixelwise t)
    (setq help-window-select t)

    ;; (setq user-full-name "Luca Cambiaghi"
    ;;       user-mail-address "luca.cambiaghi@me.com")

    (setq read-process-output-max (* 1024 1024)) ;; 1mb

    ;; always allow 'y' instead of 'yes'.
    (defalias 'yes-or-no-p 'y-or-n-p)

    ;; default to utf-8 for all the things
    (set-charset-priority 'unicode)
    (setq locale-coding-system 'utf-8
          coding-system-for-read 'utf-8
          coding-system-for-write 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

    ;; write over selected text on input... like all modern editors do
    (delete-selection-mode t)

    ;; don't want ESC as a modifier
    (general-def "<escape>" 'keyboard-escape-quit)
    ;; prevent ESC from window quiting
    (defadvice keyboard-escape-quit
        (around keyboard-escape-quit-dont-close-windows activate)
      (let ((buffer-quit-function (lambda () ())))
        ad-do-it))

    ;; Don't persist a custom file, this bites me more than it helps
    (setq custom-safe-themes t)            ; mark all themes as safe, since we can't persist now
    ;; (setq enable-local-variables :all)     ; fix =defvar= warnings

    ;; stop emacs from littering the file system with backup files
    ;; (setq make-backup-files nil
    ;;       auto-save-default nil
    ;;       create-lockfiles nil)

    ;; follow symlinks
    (setq vc-follow-symlinks t)

    ;; don't show any extra window chrome
    (when (window-system)
      (tool-bar-mode -1)
      (toggle-scroll-bar -1))

    ;; enable winner mode globally for undo/redo window layout changes
    ;; (winner-mode t)


    ;; less noise when compiling elisp
    ;; (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
    ;; (setq native-comp-async-report-warnings-errors nil)
    (setq load-prefer-newer t)

    ;; use common convention for indentation by default
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)

    ;; Enable indentation+completion using the TAB key.
    ;; Completion is often bound to M-TAB.
    (setq tab-always-indent 'complete)

    ;; Delete files to trash
    (setq delete-by-moving-to-trash t)

    ;; Uniquify buffer names
    (setq-default uniquify-buffer-name-style 'forward)

    ;; Better scrolling behaviour
    (setq-default
     hscroll-step 1
     scroll-margin 4
     hscroll-margin 4
     mouse-yank-at-point t
     auto-window-vscroll nil
     mouse-wheel-scroll-amount '(1)
     mouse-wheel-tilt-scroll t
     mouse-wheel-flip-direction t
     scroll-conservatively most-positive-fixnum)

    ;; Better interaction with clipboard
    (setq-default save-interprogram-paste-before-kill t)

    (setq-default show-trailing-whitespace nil)

    (setq-default fill-column 75)

    ;; LSP recomendation
    (setq read-process-output-max (* 1024 1024))

    ;; Some usefull builtin minor modes
    ;; (save-place-mode 1)
    (blink-cursor-mode 0)
    (column-number-mode 1)
    (global-subword-mode 1)
    (global-auto-revert-mode 1)
    (set-fringe-style '(10 . 10))

    ;; Maybe gives some optimization
    (add-hook 'focus-out-hook #'garbage-collect)

    ;; delete whitespace
    (add-hook 'before-save-hook #'whitespace-cleanup))

#+END_SRC

** Garbage collector magic hack
Used by DOOM to manage garbage collection
#+BEGIN_SRC emacs-lisp
  (use-package gcmh
    :config
    (gcmh-mode 1)
    (setq gcmh-idle-delay 5))
#+END_SRC

** help
#+begin_src emacs-lisp
  (add-hook 'help-mode-hook 'visual-line-mode)
#+end_src

** helpful

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :after evil
    :config
    (add-hook 'helpful-mode-hook 'visual-line-mode)
    :general
    ([remap describe-function] 'helpful-callable
     [remap describe-command] 'helpful-command
     [remap describe-variable] 'helpful-variable
     [remap describe-key] 'helpful-key))
#+END_SRC

** elisp-demos
#+begin_src emacs-lisp
  (use-package elisp-demos
    :after (helpful)
    :config
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src

** eldoc
#+begin_src emacs-lisp
  (use-package eldoc
    :hook (emacs-lisp-mode cider-mode))
#+end_src

** no littering
#+begin_src emacs-lisp
  (use-package no-littering
    :config
    (with-eval-after-load 'recentf
      (add-to-list 'recentf-exclude no-littering-var-directory)
      (add-to-list 'recentf-exclude no-littering-etc-directory))
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
    (when (file-exists-p custom-file)
      (load-file custom-file)))

#+end_src

** recentf
#+begin_src emacs-lisp

  (use-package recentf
    :straight (:type built-in)
    :after no-littering
    :demand t
    :config
    (recentf-mode 1)
    (setq recentf-max-saved-items 50)
    (setq recentf-exclude `(,(expand-file-name "straight/build/" user-emacs-directory))))
    ;;                         ,(expand-file-name "eln-cache/" user-emacs-directory)
    ;;                         ,(expand-file-name "etc/" user-emacs-directory)
    ;;                         ,(expand-file-name "var/" user-emacs-directory)))
#+end_src

** save-place
#+begin_src emacs-lisp
  (use-package saveplace
    :straight (:type built-in)
    :after no-littering
    :config
    (save-place-mode 1))
#+end_src

** Configurating so-long.el
When emacs load files with long lines it can block or crash so this minor mode
is there to prevent it from doing that.

#+begin_src emacs-lisp
  (setq-default bidi-paragraph-direction 'left-to-right)
  (setq bidi-inhibit-bpa t)

  (use-package so-long
    :straight nil
    :hook (emacs-startup . global-so-long-mode))
#+end_src

** File registers
*** Open config

#+begin_src emacs-lisp
  (set-register ?c `(file . ,(expand-file-name kr/config-org user-emacs-directory)))
  (set-register ?i `(file . ,(expand-file-name "init.el" user-emacs-directory)))
#+end_src

*** Personal
#+begin_src emacs-lisp
  (set-register ?t `(file . "~/Documents/from-home/terapija.org"))
#+end_src

** Writing Languages

*** Serbian
I making a custom input method for Serbian language because all the other methods that exist are stupid.
[[https://satish.net.in/20160319/][Reference how to make custom input method]].

#+begin_src emacs-lisp
  (quail-define-package
   "serbian-latin" "Serbian" "SR" nil
   "Sensible Serbian keyboard layout."
    nil t nil nil nil nil nil nil nil nil t)

  (quail-define-rules
   ("x" ?š)
   ("X" ?Š)
   ("w" ?č)
   ("W" ?Č)
   ("q" ?ć)
   ("Q" ?Ć)
   ("y" ?ž)
   ("Y" ?Ž)
   ("dj" ?đ)
   ("Dj" ?Đ)
   ("DJ" ?Đ))
#+end_src
This input method changes all English keys with Serbian.

Set =serbian-latin= to default input method.
#+begin_src emacs-lisp
  (setq default-input-method "serbian-latin")
#+end_src
*** Spelling
#+begin_src emacs-lisp
  (use-package ispell
    :straight (:type built-in)
    :defer t
    :init
    (setq ispell-program-name "/usr/bin/aspell"))
#+end_src

** Calendar

#+begin_src emacs-lisp
  (setq calendar-date-style 'european)
  (setq calendar-week-start-day 1)
#+end_src

** Ediff
#+begin_src emacs-lisp
  (use-package ediff
    :defer t
    :straight (:type built-in)
    :config
    (winner-mode)
    (add-hook 'ediff-after-quit-hook-internal 'winner-undo)
    (general-setq ediff-window-setup-function 'ediff-setup-windows-plain)
    (general-setq ediff-split-window-function 'split-window-horizontally))
#+end_src

* COMMENT Evil
** evil mode
Best VIM reference: https://countvajhula.com/2021/01/21/vim-tip-of-the-day-a-series/

Search tricks:
- =*= / # to go to next/prev occurence of symbol under point
- =/= starts a search, use =n= / =N= to go to next/prev
- Use the =gn= noun to, for example, change next match with =cgn=

Some interesting vim nouns:
- =_= : first character in the line (synonym to =^=)
- =g_= : last character on the line (synonym to =$=)

Marks:
- =ma= : mark a position in buffer and save it to register ~a~
- ='a= : go to mark ~a~
- =mA= : mark position and filename                              [
- =]'= : go to next mark
- =''= : go back to previous mark (kept track automatically)
- =g;= : go to previous change location
  + =gi= : go back to insert mode where you left off
- =C-o= : jump (out) to previous position (useful after =gd=)
- =C-i= : jump (in) to previous position

Macros:
- =QQ= : record macro ~Q~
- =@Q= : execute macro ~Q~

Registers:
- ="ayio= : save object in register ~a~                              "
- ="ap= : paste object in register ~a~                                "
  + Macros are saved in registers so you can simply ="qp= and paste your macro!!          "

NOTE: I inserted the above quotes because the single double quotes were breaking my VIM object detection
in the rest of the file

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :general
    (kr/leader-keys
      "th" 'evil-ex-nohighlight)
    (motion
     "<return>" nil)
    (normal
     "U" 'evil-invert-char)
   :init
    (setq evil-want-C-i-jump nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-symbol-word-search t)
    (setq evil-undo-system 'undo-tree)
    (setq evil-respect-visual-line-mode t)
    (setq evil-search-module 'evil-search)  ;; enables gn
    ;; move to window when splitting
    (setq evil-split-window-below t)
    (setq evil-vsplit-window-right t)
    ;; (setq-local evil-scroll-count 0)
    ;; (setq evil-auto-indent nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (general-def normal
      "q" nil
      "Q" 'evil-record-macro)
    ;; don't move cursor after ==
    (defun lc/evil-dont-move-cursor (orig-fn &rest args)
      (save-excursion (apply orig-fn args)))
    (advice-add 'evil-indent :around #'lc/evil-dont-move-cursor)

    ;; https://github.com/noctuid/evil-guide#whats-the-equivalent-of-nnoremap-n-nzz
    (advice-add 'evil-search-next :after #'evil-scroll-line-to-center)
    (advice-add 'evil-search-previous :after #'evil-scroll-line-to-center)

    ;; :q should kill the current buffer rather than quitting emacs entirely
    (evil-ex-define-cmd "q" 'kill-this-buffer)
    (evil-ex-define-cmd "wq" 'save-and-kill-this-buffer)
    ;; Need to type out :quit to close emacs
    (evil-ex-define-cmd "quit" 'kill-buffer-and-window)

    ;; Pretty collors for point
    (setq evil-motion-state-cursor "#bb1111")
    (setq evil-normal-state-cursor "#eeeeee")
    (setq evil-emacs-state-cursor "#ee6622")
    (setq evil-insert-state-cursor '(bar "#ff1547")))

#+END_SRC

** evil-collection
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :init
    (setq evil-collection-company-use-tng nil) ; for lsp tng must be nil
    (setq evil-collection-magit-use-z-for-folds nil)
    :config
    (evil-collection-init))
#+END_SRC

** evil-anzu
Shows how many matches is in a search.

#+begin_src emacs-lisp
  (use-package evil-anzu
    :after evil
    :config
    (global-anzu-mode))
#+end_src

** evil-commentary

#+begin_src emacs-lisp
  (use-package evil-commentary
    :after (evil)
    :general
    ('normal
     "gy" 'evil-commentary-yank
     "gc" 'evil-commentary)
    :config
    (evil-commentary-mode 1))
#+end_src

** eval operator
This section provides a custom eval operator, accessible with =gr=.
This gives you super powers when coupled with custom text objects (provided by  [[*evil-indent-plus][evil-indent-plus]]  and evil-cleverparens )

For example:
- =grab= evals the form at point
- =grad= evals the top-level form (e.g. use-package blocks or functions)
- =grak= evals the function in ~python~
- =grr= evals the line

#+begin_src emacs-lisp
  (use-package evil
    :config
    (defcustom evil-extra-operator-eval-modes-alist
      '(;; (emacs-lisp eval-region)
        ;; (scheme-mode geiser-eval-region)
        (clojure-mode cider-eval-region)
        (jupyter-python jupyter-eval-region) ;; when executing in src block
        (python-mode jupyter-eval-region)) ;; when executing in org-src-edit mode

      "Alist used to determine evil-operator-eval's behaviour.
  Each element of this alist should be of this form:
   (MAJOR-MODE EVAL-FUNC [ARGS...])
  MAJOR-MODE denotes the major mode of buffer. EVAL-FUNC should be a function
  with at least 2 arguments: the region beginning and the region end. ARGS will
  be passed to EVAL-FUNC as its rest arguments"
      :type '(alist :key-type symbol)
      :group 'evil-extra-operator)

    (evil-define-operator evil-operator-eval (beg end)
      "Evil operator for evaluating code."
      :move-point nil
      (interactive "<r>")
      (let* ((mode (if (org-in-src-block-p) (intern (car (org-babel-get-src-block-info))) major-mode))
             (ele (assoc mode evil-extra-operator-eval-modes-alist))
             (f-a (cdr-safe ele))
             (func (car-safe f-a))
             (args (cdr-safe f-a)))
        (if (fboundp func)
            (apply func beg end args)
          (eval-region beg end t))))

    (define-key evil-motion-state-map "gr" 'evil-operator-eval))

#+end_src

** evil-matchit

#+begin_src emacs-lisp
  (use-package evil-matchit
    :hook (prog-mode . evil-matchit-mode))
#+end_src

** evil-goggles
#+BEGIN_SRC emacs-lisp
  (use-package evil-goggles
    :after evil
    :init
    (setq evil-goggles-duration 0.1)
    :config
    (push '(evil-operator-eval
            :face evil-goggles-yank-face
            :switch evil-goggles-enable-yank
            :advice evil-goggles--generic-async-advice)
          evil-goggles--commands)
    (evil-goggles-mode)
    ;; (evil-goggles-use-diff-faces)
    )
#+END_SRC

** evil-snipe
#+BEGIN_SRC emacs-lisp
  (use-package evil-snipe
    :after evil
    :config
    (setq evil-snipe-repeat-scope 'visible)
    ;; (evil-snipe-mode 1)
    (evil-snipe-override-mode 1)
    (push 'dired-mode evil-snipe-disabled-modes))
#+END_SRC

** evil-exchange
#+begin_src emacs-lisp
  (use-package evil-exchange
    :after evil
    :config (evil-exchange-install))
#+end_src

** evil-surround
(
- Use =S)= to surround something without spaces e.g. ~(sexp)~
- Use =S(= to surround something with spaces e.g. ~( sexp )~
)

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :init
    (global-evil-surround-mode 1)
    :general
    ('visual 'evil-surround-mode-map
     "s" 'evil-surround-region))
#+END_SRC

** evil-indent-plus
To select a function in ~python~:
- Stand on a line in the body of the function (root, not an if)
- Select with =vik=

#+begin_src emacs-lisp
  (use-package evil-indent-plus
    :after evil
    :config
    (define-key evil-inner-text-objects-map "i" 'evil-indent-plus-i-indent)
    (define-key evil-outer-text-objects-map "i" 'evil-indent-plus-a-indent)
    (define-key evil-inner-text-objects-map "k" 'evil-indent-plus-i-indent-up)
    (define-key evil-outer-text-objects-map "k" 'evil-indent-plus-a-indent-up)
    (define-key evil-inner-text-objects-map "j" 'evil-indent-plus-i-indent-up-down)
    (define-key evil-outer-text-objects-map "j" 'evil-indent-plus-a-indent-up-down)
    )
#+end_src

** evil-iedit-state
Keybindings:
- =TAB= :: toggle occurrence
- =n= / =N= :: next/prev occurrence
- =F= :: restrict scope to function
- =J= / =K= :: extend scope of match down/up
- =V= :: toggle visibility of matches

#+begin_src emacs-lisp
  (use-package evil-iedit-state
    :general
    (kr/leader-keys
      "s e" '(evil-iedit-state/iedit-mode :wk "iedit")
      "s q" '(evil-iedit-state/quit-iedit-mode :wk "iedit quit")))
#+end_src

* undo-tree
#+begin_src emacs-lisp
    (use-package undo-tree
      :config (global-undo-tree-mode 1))
#+end_src

* which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :general
    :hook (after-init . which-key-mode)
    :config
    (setq which-key-idle-delay 0.5))
#+END_SRC

* Completion framework
** selectrum
#+BEGIN_SRC emacs-lisp
  (use-package selectrum
    :demand
    :general
    ("M-c" 'selectrum-repeat)
    (selectrum-minibuffer-map
     "C-r" 'evil-paste-from-register
     "C-j" 'selectrum-next-candidate
     "C-k" 'selectrum-previous-candidate
     "M-j" 'next-history-element
     "M-k" 'previous-history-element)
    :config
    (setq selectrum-count-style 'current/matches)
    (selectrum-mode t))

#+END_SRC

** prescient
#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :after selectrum
    :config
    (prescient-persist-mode 1))

  (use-package selectrum-prescient
    :after (prescient selectrum)
    :config
    (selectrum-prescient-mode 1))
#+END_SRC

** marginalia
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :after selectrum
    :init
    ;; this sould be changed
    (setq marginalia-annotators '(marginalia-annotators-heavy
                                  marginalia-annotators-light nil))
    (marginalia-mode 1))
#+END_SRC

** consult
To search for multiple words with ~consult-ripgrep~ you should search e.g. for
~#defun#some words~ . The first filter is passed to an async ~ripgrep~ process
and the second filter to the completion-style filtering (?).

#+BEGIN_SRC emacs-lisp
  (use-package consult
    :straight (consult :host github :repo "minad/consult" :branch "main")
    :commands (consult-ripgrep)
    :general
    ([remap apropos-command] 'consult-apropos)
    :init
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    :config
    (setq consult-preview-key nil))
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-root-function #'projectile-project-root)

#+END_SRC

** embark
- You can act on candidates with =C-l= and ask to remind bindings with =C-h=
- You can run ~embark-export~ on all results (e.g. after a ~consult-line~) with =C-l E=
  + You can run ~embark-export-snapshot~ with =C-l S=

#+BEGIN_SRC emacs-lisp
  (use-package embark
    :general
    (selectrum-minibuffer-map
     "C-l" #'embark-act)
    (:keymaps 'embark-file-map "o" 'find-file-other-window))
#+END_SRC

** embark-consult
#+begin_src emacs-lisp
  (use-package embark-consult
    :straight (embark-consult :type git :host github :repo "oantolin/embark" :files ("embark-consult.el"))
    :after (embark consult))
    ;; :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    ;; :hook
    ;; (embark-collect-mode . embark-consult-preview-minor-mode)

#+end_src

** wgrep
After running ~embark-export~, we can edit the results with ~wgrep~ and commit
the edits.
This is extremely powerful for refactorings such as changing the name of a class
or a function across files in the project.

#+begin_src emacs-lisp
  (use-package wgrep
    :general
    (grep-mode-map "W" 'wgrep-change-to-wgrep-mode)
    :init
    (setq wgrep-auto-save-buffer t)
    (setq wgrep-change-readonly-file t))
#+end_src

** dabbrev
#+begin_src emacs-lisp
(use-package dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand)))
#+end_src

** Company
*** company-mode
~company-tng-mode~ (tab-n-go):
- Select candidates with =C-j= / =C-k= or =TAB= / =S-TAB=
- don't press =RET= to confirm

#+BEGIN_SRC emacs-lisp
  (use-package company-mode
    :hook (after-init . global-company-mode)
    :init
    (setq completion-styles '(basic partial-completion flex))

    (setq company-dabbrev-downcase nil)
    (setq company-dabbrev-ignore-case nil)
    ;; (setq company-require-match nil)

    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1)
    (setq company-selection-wrap-around t)
    (setq company-global-modes '(not help-mode
                                     helpful-mode
                                     gud-mode))

    (setq company-backends '((company-capf company-keywords company-files :with company-yasnippet))))

    ;; icons with company
    ;; (setq company-format-margin-function #'company-vscode-light-icons-margin)

#+END_SRC

*** company prescient
#+BEGIN_SRC emacs-lisp
(use-package company-prescient
  :after company
  :demand
  :config
  (company-prescient-mode t))
#+END_SRC

*** COMMENT company box
Taken from DOOM
#+begin_src emacs-lisp
(use-package company-box
  :if (display-graphic-p)
  :hook (company-mode . company-box-mode)
  :config
  (with-no-warnings
    ;; Prettify icons
    (defun my-company-box-icons--elisp (candidate)
      (when (derived-mode-p 'emacs-lisp-mode)
        (let ((sym (intern candidate)))
          (cond ((fboundp sym) 'Function)
                ((featurep sym) 'Module)
                ((facep sym) 'Color)
                ((boundp sym) 'Variable)
                ((symbolp sym) 'Text)
                (t . nil)))))
    (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp))

  (declare-function all-the-icons-faicon 'all-the-icons)
  (declare-function all-the-icons-material 'all-the-icons)
  (declare-function all-the-icons-octicon 'all-the-icons)

  (setq company-box-icons-all-the-icons
        `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.8 :v-adjust -0.15))
          (Text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.02))
          (Method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
          (Function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
          (Constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
          (Field . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
          (Variable . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
          (Class . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
          (Interface . ,(all-the-icons-material "share" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
          (Module . ,(all-the-icons-material "view_module" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
          (Property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.02))
          (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.8 :v-adjust -0.15))
          (Value . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
          (Enum . ,(all-the-icons-material "storage" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
          (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.8 :v-adjust -0.15))
          (Snippet . ,(all-the-icons-material "format_align_center" :height 0.8 :v-adjust -0.15))
          (Color . ,(all-the-icons-material "palette" :height 0.8 :v-adjust -0.15))
          (File . ,(all-the-icons-faicon "file-o" :height 0.8 :v-adjust -0.02))
          (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.8 :v-adjust -0.15))
          (Folder . ,(all-the-icons-faicon "folder-open" :height 0.8 :v-adjust -0.02))
          (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15))
          (Constant . ,(all-the-icons-faicon "square-o" :height 0.8 :v-adjust -0.1))
          (Struct . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
          (Event . ,(all-the-icons-octicon "zap" :height 0.8 :v-adjust 0 :face 'all-the-icons-orange))
          (Operator . ,(all-the-icons-material "control_point" :height 0.8 :v-adjust -0.15))
          (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.02))
          (Template . ,(all-the-icons-material "format_align_left" :height 0.8 :v-adjust -0.15)))
        company-box-icons-alist 'company-box-icons-all-the-icons)

  (setq company-box-show-single-candidate t
        company-box-backends-colors nil
        company-box-max-candidates 10)
  ;; Disable tab-bar in company-box child frames
  (add-to-list 'company-box-frame-parameters '(tab-bar-lines . 0))
  )
#+end_src

*** COMMENT company posframe
#+begin_src emacs-lisp
(use-package company-posframe
  :hook (company-mode . company-posframe-mode)
  )
#+end_src

** corfu
#+begin_src emacs-lisp
  ;; Configure corfu
  (use-package corfu
    :general
    (corfu-map
     :states 'insert
     "C-g" 'corfu-abort
     "C-j" 'corfu-next
     "C-k" 'corfu-previous))

    ;; :hook ((prog-mode . corfu-mode)
    ;;        (org-mode . corfu-mode))
    ;; :config
    ;; (add-to-list 'corfu--frame-parameters '(tab-bar-lines . 0))
    ;; (defun lc/disable-tabs (orig-fn &rest args)
    ;;   (progn (centaur-tabs-local-mode) (apply orig-fn args)))
    ;; (defun lc/reenable-tabs (orig-fn &rest args)
    ;;   (progn (centaur-tabs-local-mode -1) (apply orig-fn args)))
    ;; (advice-add 'corfu--popup-show :around #'lc/disable-tabs)
    ;; (advice-add 'corfu--popup-hide :around #'lc/reenable-tabs)
    ;; Optionally enable cycling for `corfu-next' and `corfu-previous'.
    ;; (setq corfu-cycle t)

#+end_src

* UI
** Font

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 115)
#+end_src

** Themes

#+begin_src emacs-lisp
  ;; list of ok themes:
  ;; doom-dark+
  ;; doom-hena
  ;; doom-snazy
  ;; doom-dracula
  ;; doom-Iosvkem
  ;; doom-old-hope
  ;; doom-palenight
  ;; doom-city-lights
  ;; dom-ocean-next

  ;; (use-package base16-themes)
  ;; dune
  ;; heath
  ;; brewer
  ;; bright
  ;; chalk
  ;; google-dark

  (use-package doom-themes
    :config
    (load-theme 'doom-1337 t))

  ;; global-hl-line-mode and region have the same color so i change it here
  (set-face-attribute 'region nil :background "#292929")
  (set-face-attribute 'secondary-selection nil :background "#701818")
  (set-face-attribute 'highlight nil :background "#454545")
#+end_src

** Start-up maximized
#+begin_src emacs-lisp
  (when window-system
    (add-to-list 'initial-frame-alist '(fullscreen . maximized)))
#+end_src

** Blackout
#+begin_src emacs-lisp
  (use-package blackout
    :config
    (blackout 'subword-mode)
    (blackout 'anzu-mode)
    (blackout 'evil-goggles-mode)
    (blackout 'undo-tree-mode)
    (blackout 'evil-snipe-local-mode)
    (blackout 'evil-collection-unimpaired-mode)
    (blackout 'evil-commentary-mode)
    (blackout 'gcmh-mode)
    (add-hook 'eldoc-mode-hook #'(lambda () (blackout 'eldoc-mode)))
    (add-hook 'which-key-mode-hook #'(lambda () (blackout 'which-key-mode)))
    (add-hook 'git-gutter-mode-hook #'(lambda () (blackout 'git-gutter-mode)))
    (add-hook 'evil-commentary-mode-hook #'(lambda () (blackout 'evil-commentary-mode)))
    (add-hook 'smartparens-mode-hook #'(lambda () (blackout 'smartparens-mode)))
    (add-hook 'org-mode-hook #'(lambda () (blackout 'evil-org-mode) (blackout 'org-indent-mode)))
    (add-hook 'yas-minor-mode-hook #'(lambda () (blackout 'yas-minor-mode))))



  ;; (use-package rich-minority
  ;; :config
  ;; (setq rm-text-properties '(("\\` company\\'"  'face 'font-lock-warning-face))
  ;; (setq rm-whitelist '(" company"))))
#+end_src

* Org

** Org

#+begin_src emacs-lisp
  (use-package org
    :straight nil
    :config
    (require 'org-tempo)
    (add-to-list 'org-modules 'org-tempo t)
    (add-to-list 'org-structure-template-alist
                 '("el" . "src emacs-lisp"))

    ;; ;; https://orgmode.org/manual/Labels-and-captions-in-ODT-export.html
    ;; (setq org-odt-category-map-alist
    ;;       '(("__Figure__" "Slika" "value" "Figure" org-odt--enumerable-image-p)))

    (setq org-startup-indented t)
    (setq org-image-actual-width 700)
    (setq org-M-RET-may-split-line nil)
    (setq org-return-follows-link t)
    (setq org-src-window-setup 'current-window))

#+end_src

** evil-org
#+NOTE: Something is not working right with this configuration. For now I will hack it together. See ###HACK### in source code.

Taken from DOOM:
- nice ~+org/insert-item-below~ and ~+org/dwim-at-point~ functions
- ~evil~ bindings for ~org-agenda~
- text objects:
  + use ~vie~ to select everything inside a src block
  + use ~vir~ to select everything inside a heading
  + use ==ie= to format

#+begin_src emacs-lisp
  (use-package evil-org-mode
    :straight (evil-org-mode :type git :host github :repo "hlissner/evil-org-mode")
    :hook ((org-mode . evil-org-mode)
           (org-mode . (lambda ()
                         (require 'evil-org)
                         (evil-normalize-keymaps)
                         (evil-org-set-key-theme '(navigation
                                                   return
                                                   insert
                                                   textobjects
                                                   additional
                                                   calendar))
                         (require 'evil-org-agenda)
                         (evil-org-agenda-set-keys))))
    :bind
    ([remap evil-org-org-insert-heading-respect-content-below] . +org/insert-item-below) ;; "<C-return>"
    ([remap evil-org-org-insert-todo-heading-respect-content-below] . +org/insert-item-above) ;; "<C-S-return>"
    ;; (general-nmap
    ;;   :keymaps 'org-mode-map
    ;;   "<return>"   #'+org/dwim-at-point)
    ;; this neest to be ported to meow normal mode ;;;;
    :config
    (setq evil-org-retain-visual-state-on-shift t)
    :init
    (defun +org--insert-item (direction)
      (let ((context (org-element-lineage
                      (org-element-context)
                      '(table table-row headline inlinetask item plain-list)
                      t)))
        (pcase (org-element-type context)
          ;; Add a new list item (carrying over checkboxes if necessary)
          ((or `item `plain-list)
           ;; Position determines where org-insert-todo-heading and org-insert-item
           ;; insert the new list item.
           (if (eq direction 'above)
               (org-beginning-of-item)
             (org-end-of-item)
             (backward-char))
           (org-insert-item (org-element-property :checkbox context))
           ;; Handle edge case where current item is empty and bottom of list is
           ;; flush against a new heading.
           (when (and (eq direction 'below)
                      (eq (org-element-property :contents-begin context)
                          (org-element-property :contents-end context)))
             (org-end-of-item)
             (org-end-of-line)))

          ;; Add a new table row
          ((or `table `table-row)
           (pcase direction
             ('below (save-excursion (org-table-insert-row t))
                     (org-table-next-row))
             ('above (save-excursion (org-shiftmetadown))
                     (+org/table-previous-row))))

          ;; Otherwise, add a new heading, carrying over any todo state, if
          ;; necessary.
          (_
           (let ((level (or (org-current-level) 1)))
             ;; I intentionally avoid `org-insert-heading' and the like because they
             ;; impose unpredictable whitespace rules depending on the cursor
             ;; position. It's simpler to express this command's responsibility at a
             ;; lower level than work around all the quirks in org's API.
             (pcase direction
               (`below
                (let (org-insert-heading-respect-content)
                  (goto-char (line-end-position))
                  (org-end-of-subtree)
                  (insert "\n" (make-string level ?*) " ")))
               (`above
                (org-back-to-heading)
                (insert (make-string level ?*) " ")
                (save-excursion (insert "\n"))))
             (when-let* ((todo-keyword (org-element-property :todo-keyword context))
                         (todo-type    (org-element-property :todo-type context)))
               (org-todo
                (cond ((eq todo-type 'done)
                       ;; Doesn't make sense to create more "DONE" headings
                       (car (+org-get-todo-keywords-for todo-keyword)))
                      (todo-keyword)
                      ('todo)))))))

        (when (org-invisible-p)
          (org-show-hidden-entry))
        (when (and (bound-and-true-p evil-local-mode)
                   (not (evil-emacs-state-p)))
          (evil-insert 1))))

    (defun +org/insert-item-below (count)
      "Inserts a new heading, table cell or item below the current one."
      (interactive "p")
      (dotimes (_ count) (+org--insert-item 'below)))

    (defun +org/insert-item-above (count)
      "Inserts a new heading, table cell or item above the current one."
      (interactive "p")
      (dotimes (_ count) (+org--insert-item 'above)))

    (defun +org/dwim-at-point (&optional arg)
      "Do-what-I-mean at point.
        If on a:
        - checkbox list item or todo heading: toggle it.
        - clock: update its time.
        - headline: cycle ARCHIVE subtrees, toggle latex fragments and inline images in
          subtree; update statistics cookies/checkboxes and ToCs.
        - footnote reference: jump to the footnote's definition
        - footnote definition: jump to the first reference of this footnote
        - table-row or a TBLFM: recalculate the table's formulas
        - table-cell: clear it and go into insert mode. If this is a formula cell,
          recaluclate it instead.
        - babel-call: execute the source block
        - statistics-cookie: update it.
        - latex fragment: toggle it.
        - link: follow it
        - otherwise, refresh all inline images in current tree."
      (interactive "P")
      (let* ((context (org-element-context))
             (type (org-element-type context)))
        ;; skip over unimportant contexts
        (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
          (setq context (org-element-property :parent context)
                type (org-element-type context)))
        (pcase type
          (`headline
           (cond ((memq (bound-and-true-p org-goto-map)
                        (current-active-maps))
                  (org-goto-ret))
                 ((and (fboundp 'toc-org-insert-toc)
                       (member "TOC" (org-get-tags)))
                  (toc-org-insert-toc)
                  (message "Updating table of contents"))
                 ((string= "ARCHIVE" (car-safe (org-get-tags)))
                  (org-force-cycle-archived))
                 ((or (org-element-property :todo-type context)
                      (org-element-property :scheduled context))
                  (org-todo
                   (if (eq (org-element-property :todo-type context) 'done)
                       (or (car (+org-get-todo-keywords-for (org-element-property :todo-keyword context)))
                           'todo)
                     'done))))
           ;; Update any metadata or inline previews in this subtree
           (org-update-checkbox-count)
           (org-update-parent-todo-statistics)
           (when (and (fboundp 'toc-org-insert-toc)
                      (member "TOC" (org-get-tags)))
             (toc-org-insert-toc)
             (message "Updating table of contents"))
           (let* ((beg (if (org-before-first-heading-p)
                           (line-beginning-position)
                         (save-excursion (org-back-to-heading) (point))))
                  (end (if (org-before-first-heading-p)
                           (line-end-position)
                         (save-excursion (org-end-of-subtree) (point))))
                  (overlays (ignore-errors (overlays-in beg end)))
                  (latex-overlays
                   (cl-find-if (lambda (o) (eq (overlay-get o 'org-overlay-type) 'org-latex-overlay))
                               overlays))
                  (image-overlays
                   (cl-find-if (lambda (o) (overlay-get o 'org-image-overlay))
                               overlays)))
             ;; (+org--toggle-inline-images-in-subtree beg end)
             (if (or image-overlays latex-overlays)
                 (org-clear-latex-preview beg end)
               (org--latex-preview-region beg end))))

          (`clock (org-clock-update-time-maybe))

          (`footnote-reference
           (org-footnote-goto-definition (org-element-property :label context)))

          (`footnote-definition
           (org-footnote-goto-previous-reference (org-element-property :label context)))

          ((or `planning `timestamp)
           (org-follow-timestamp-link))

          ((or `table `table-row)
           (if (org-at-TBLFM-p)
               (org-table-calc-current-TBLFM)
             (ignore-errors
               (save-excursion
                 (goto-char (org-element-property :contents-begin context))
                 (org-call-with-arg 'org-table-recalculate (or arg t))))))

          (`table-cell
           (org-table-blank-field)
           (org-table-recalculate arg)
           (when (and (string-empty-p (string-trim (org-table-get-field)))
                      (bound-and-true-p evil-local-mode))
             (evil-change-state 'insert)))

          (`babel-call
           (org-babel-lob-execute-maybe))

          (`statistics-cookie
           (save-excursion (org-update-statistics-cookies arg)))

          ((or `src-block `inline-src-block)
           (org-babel-execute-src-block arg))

          ((or `latex-fragment `latex-environment)
           (org-latex-preview arg))

          (`link
           (let* ((lineage (org-element-lineage context '(link) t))
                  (path (org-element-property :path lineage)))
             (if (or (equal (org-element-property :type lineage) "img")
                     (and path (image-type-from-file-name path)))
                 (+org--toggle-inline-images-in-subtree
                  (org-element-property :begin lineage)
                  (org-element-property :end lineage))
               (org-open-at-point arg))))

          ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
           (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
             (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

          (_
           (if (or (org-in-regexp org-ts-regexp-both nil t)
                   (org-in-regexp org-tsr-regexp-both nil  t)
                   (org-in-regexp org-link-any-re nil t))
               (call-interactively #'org-open-at-point)
             (+org--toggle-inline-images-in-subtree
              (org-element-property :begin context)
              (org-element-property :end context))))))))
#+end_src

* Dired

NOTE - dired enhancement packages: dired-postframe, dired-git, dired-filter, dired-narow

** dired
#+begin_src emacs-lisp
  (use-package dired
    :straight (:type built-in)
    :hook ((dired-mode . (lambda ()
                           (unless (file-remote-p default-directory)
                             (auto-revert-mode))))
           (dired-mode . toggle-truncate-lines))
    :general
    ("C-x j" 'dired-jump)
    :config
    (setq dired-dwim-target t)
    (setq dired-isearch-filenames 'dwim)
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq dired-create-destination-dirs 'always)
    (setq dired-listing-switches "-valh --group-directories-first"))
 #+end_src

** dired-x
#+begin_src emacs-lisp
  (use-package dired-x
    :straight (:type built-in)
    :commands dired-jump
    :config
    ;; (setq dired-clean-confirm-killing-deleted-buffers nil)

    ;; dired-x will help to remove buffers that were associated with deleted
    ;; files/directories

    ;; to not get y-or-no question for killing buffers when deliting files go here for
    ;; inspiration on how to do it
    ;; https://stackoverflow.com/questions/11546639/dired-x-how-to-set-kill-buffer-of-too-to-yes-without-confirmation
    ;; https://emacs.stackexchange.com/questions/30676/how-to-always-kill-dired-buffer-when-deleting-a-folder
    ;; https://www.reddit.com/r/emacs/comments/91xnv9/noob_delete_buffer_automatically_after_removing/
    )
#+end_src

** COMMENT dired-sidebar
#+begin_src emacs-lisp
  (use-package dired-sidebar
    :commands (dired-sidebar-toggle-sidebar)
    :config
    (setq dired-sidebar-width 30)
    :general
    (kr/leader-keys
     "fd" 'dired-sidebar-toggle-sidebar))
#+end_src

** all-the-icons-dired

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . (lambda () (interactive)
                        (unless (file-remote-p default-directory)
                          (all-the-icons-dired-mode)))))
#+end_src

** dired-hacks

*** COMMENT dired-k
#+begin_src emacs-lisp
  (use-package dired-k
    :disabled
    :hook
    ((dired-initial-position . dired-k)
     (dired-after-readin . dired-k-no-revert))
    :config
    (setq dired-k-style 'git)
    (setq dired-k-human-readable t)
    ;; so that dired-k plays nice with dired-subtree
    (advice-add 'dired-subtree-insert :after 'dired-k-no-revert))
#+end_src

*** dired-subtree
#+begin_src emacs-lisp
  (use-package dired-subtree
    :after dired
    :config
    ;; so that dired icons work nicely with subtree
    (advice-add 'dired-subtree-toggle :after #'(lambda ()
                                                 (interactive)
                                                 (call-interactively #'revert-buffer))))
#+end_src

*** dired-reinbow
#+begin_src emacs-lisp
  (use-package dired-rainbow
    :after dired
    :config
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log "#c17d11" ("log"))
    (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))
#+end_src

* Uncategorized packages
Here are packages that don't belong to any category.

** ibuffer
#+begin_src emacs-lisp
  (use-package ibuffer
    :straight (:type built-in)
    :general
    ([remap list-buffers] 'ibuffer))
#+end_src

** hydra
#+begin_src emacs-lisp
  (use-package hydra
    :defer t)
#+end_src

** yasnippet
We use =C-TAB= to expand snippets instead of =TAB= .

You can have ~#condition: 'auto~ for the snippet to auto-expand.

See [[http://joaotavora.github.io/yasnippet/snippet-organization.html#org7468fa9][here]] to share snippets across modes

#+begin_src emacs-lisp
  ;; ((defun lc/yas-try-expanding-auto-snippets ()
  ;;    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
  ;;      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
  ;;        (yas-expand))))
  ;;  :config
  ;;  (add-hook 'post-command-hook #'lc/yas-try-expanding-auto-snippets))

  (use-package yasnippet
   :commands yas-minor-mode
    :config
    (yas-reload-all))

  (use-package yasnippet-snippets
    :after yasnippet)

#+end_src

** olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :defer t
    :config
    (setq olivetti-body-width 90))
#+end_src

** perspective
#+begin_src emacs-lisp
  (use-package perspective
    :defer t)
#+end_src

** hl-todo
#+begin_src emacs-lisp
  (use-package hl-todo
    :hook (prog-mode . hl-todo-mode)
    :config
    (setq hl-todo-highlight-punctuation ":")
    (setq hl-todo-keyword-faces
        '(("TODO"   . "#FF4500")
          ("FIXME"  . "#FF0000")
          ("DEBUG"  . "#A020F0")
          ("GOTCHA" . "#FF4500")
          ("STUB"   . "#1E90FF"))))
#+end_src

* Programing

** Hooks for prog mode
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'visual-line-mode)
#+end_src

** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands
    (lsp lsp-deferred)
    :hook
    ((lsp-mode . lsp-enable-which-key-integration)
     (lsp-mode . evil-normalize-keymaps)
     (c-mode . lsp)
     (js-mode . lsp)
     (json-mode . lsp)
     (web-mode . lsp)
     (css-mode . lsp)
     (lsp-mode . yas-minor-mode))
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (setq lsp-lens-enable t))

    ;; (setq lsp-restart 'ignore)
    ;; (setq lsp-eldoc-enable-hover nil)
    ;; (setq lsp-enable-file-watchers nil)
    ;; (setq lsp-signature-auto-activate nil)
    ;; (setq lsp-modeline-diagnostics-enable nil)
    ;; (setq lsp-keep-workspace-alive nil)
    ;; (setq lsp-auto-execute-action nil)
    ;; (setq lsp-before-save-edits nil)
    ;; (setq lsp-diagnostics-provider :flymake)
#+END_SRC

** Git
*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :general
    (kr/leader-keys
      "g b" 'magit-blame
      "g g" 'magit-status
      "g G" 'magit-status-here
      "g l" 'magit-log)
    :config
    ;; Change magit diff face to something less flashy
    (dolist (face '(magit-diff-added
                    magit-diff-added-highlight
                    magit-diff-removed
                    magit-diff-removed-highlight))
      (set-face-background face (face-attribute 'magit-diff-context-highlight :background)))
    (set-face-background 'magit-diff-context-highlight
                         (face-attribute 'default :background))

    ;; open magit buffer on whole window
    ;; (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    :init
    (setq git-commit-fill-column 72))
    ;; (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    ;; (setq magit-log-arguments '("--graph" "--decorate" "--color"))
    ;; ;; (setq magit-log-margin (t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))
    ;; :config
    ;; (evil-define-key* '(normal visual) magit-mode-map
    ;;   "zz" #'evil-scroll-line-to-center)
#+end_src

*** Git-gutter
#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :init (add-hook 'emacs-startup-hook #'global-git-gutter-mode)
    :general
    (kr/leader-keys
      "gs" 'git-gutter:stage-hunk))
#+end_src

*** git-timemachine
#+begin_src emacs-lisp
  (use-package git-timemachine
    :hook (git-time-machine-mode . evil-normalize-keymaps)
    :init (setq git-timemachine-show-minibuffer-details t)
    :general
    (kr/leader-keys "g t" 'git-timemachine-toggle)
    (git-timemachine-mode-map
     "C-k" 'git-timemachine-show-previous-revision
     "C-j" 'git-timemachine-show-next-revision
     "q" 'git-timemachine-quit))
#+end_src

*** hydra-smerge
#+begin_src emacs-lisp
  (use-package smerge-mode
    :straight (:type built-in)
    :after hydra
    :general
    (lc/leader-keys "g m" 'smerge-hydra/body)
    :hook
    (magit-diff-visit-file . (lambda ()
                               (when smerge-mode
                                 (smerge-hydra/body))))
    :init
    (defhydra smerge-hydra (:hint nil
                                  :pre (smerge-mode 1)
                                  ;; Disable `smerge-mode' when quitting hydra if
                                  ;; no merge conflicts remain.
                                  :post (smerge-auto-leave))
      "
                                                      ╭────────┐
    Movement   Keep           Diff              Other │ smerge │
    ╭─────────────────────────────────────────────────┴────────╯
       ^_g_^       [_b_] base       [_<_] upper/base    [_C_] Combine
       ^_C-k_^     [_u_] upper      [_=_] upper/lower   [_r_] resolve
       ^_k_ ↑^     [_l_] lower      [_>_] base/lower    [_R_] remove
       ^_j_ ↓^     [_a_] all        [_H_] hightlight
       ^_C-j_^     [_RET_] current  [_E_] ediff             ╭──────────
       ^_G_^                                            │ [_q_] quit"
      ("g" (progn (goto-char (point-min)) (smerge-next)))
      ("G" (progn (goto-char (point-max)) (smerge-prev)))
      ("C-j" smerge-next)
      ("C-k" smerge-prev)
      ("j" next-line)
      ("k" previous-line)
      ("b" smerge-keep-base)
      ("u" smerge-keep-upper)
      ("l" smerge-keep-lower)
      ("a" smerge-keep-all)
      ("RET" smerge-keep-current)
      ("\C-m" smerge-keep-current)
      ("<" smerge-diff-base-upper)
      ("=" smerge-diff-upper-lower)
      (">" smerge-diff-base-lower)
      ("H" smerge-refine)
      ("E" smerge-ediff)
      ("C" smerge-combine-with-next)
      ("r" smerge-resolve)
      ("R" smerge-kill-current)
      ("q" nil :color blue)))
#+end_src

** Tree-sitter
#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter
    :hook
    (js-mode . tree-sitter-hl-mode)
    (python-mode . tree-sitter-hl-mode)
    ;; (web-mode . tree-sitter-hl-mode)
    (css-mode . tree-sitter-hl-mode)
    (go-mode . tree-sitter-hl-mode)
    :config
    (add-to-list 'tree-sitter-major-mode-language-alist '(web-mode . html))
    (use-package tree-sitter-langs))
#+END_SRC

** Project
#+begin_src emacs-lisp
  (use-package project
    :general
    (kr/leader-keys
      "p" project-prefix-map))
#+end_src

** Parentheses

*** Rainbow-delimiters
Pretty colors for parens :)
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((prog-mode comint-mode) . rainbow-delimiters-mode))
#+end_src

*** Smartparen
Smart paren I'm using to pair characters like quotes.
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    ;;;; https://xenodium.com/emacs-smartparens-auto-indent/
    (defun indent-between-pair (&rest _ignored)
      (newline)
      (indent-according-to-mode)
      (forward-line -1)
      (indent-according-to-mode))
    (sp-local-pair 'prog-mode "{" nil :post-handlers '((indent-between-pair "RET")))
    (sp-local-pair 'prog-mode "[" nil :post-handlers '((indent-between-pair "RET")))
    (sp-local-pair 'prog-mode "(" nil :post-handlers '((indent-between-pair "RET")))
    ;;;;

    (smartparens-global-mode 1)
    ;; (show-paren-mode 1)
    (show-smartparens-global-mode 1)) ; alternative to show-paren-mode
#+end_src

*** Parinfer
Parinfer is there for lisp editing.
#+begin_src emacs-lisp
  ;; (defvar kr/modes-for-parinfer '
  ;;   "Modes where parinfer should be enabled")

  (use-package parinfer-rust-mode
    :init
    (setq parinfer-rust-library-directory
          (expand-file-name "./var/parinfer-rust/" user-emacs-directory))
    :config
    (add-to-list 'parinfer-rust-treat-command-as '(evil-open-above . "indent"))
    (add-to-list 'parinfer-rust-treat-command-as '(meow-open-above . "indent"))
    (add-to-list 'parinfer-rust-treat-command-as '(meow-open-below . "indent"))
    (add-to-list 'parinfer-rust-treat-command-as '(meow-yank . "indent"))

    (general-add-hook '(emacs-lisp-mode-hook lisp-mode-hook) #'parinfer-rust-mode))
#+end_src

** Line nubmer
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'toggle-truncate-lines)
#+end_src

** Apheleia

For formating code with ~prettier~ or ~black~.

#+begin_src emacs-lisp
  (use-package apheleia
    :hook (js-mode . apheleia-mode))
#+end_src

** Flutter

*** Dart
#+begin_src emacs-lisp
  (defun kr-set-comile-command ()
    (setq-local
     compile-command
     (concat "dart "
             (when buffer-file-name
               buffer-file-name))))

  (use-package dart-mode
    :config
    (add-hook 'dart-mode-hook #'kr-set-comile-command)
    (setq lsp-dart-sdk-dir "~/.flutter/bin/cache/dart-sdk"))
#+end_src

*** lsp-dart
#+begin_src emacs-lisp
  ;; (use-package flycheck)

  (use-package lsp-dart
    :hook (dart-mode . lsp)
    :config
    (setq lsp-signature-auto-activate nil))
#+end_src

*** Hover
#+begin_src emacs-lisp
  (use-package hover)
#+end_src

** web

*** Exato

Evil object for html attributes:

- =daa= : delete around attribute
- =dia= : delete inside attribute

#+begin_src emacs-lisp
  (use-package exato
    :init
    (setq exato-key "a"))
#+end_src

*** web-mode

#+begin_src emacs-lisp
  (use-package web-mode
    :mode ("\\.html?\\'" "\\.php?\\'")
    :defer t
    :config
    (add-hook 'web-mode-hook #'visual-line-mode)
    (setq web-mode-auto-close-style 1)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-markup-indent-offset 2))
#+end_src

*** emmet-mode
#+begin_src emacs-lisp
  (use-package emmet-mode
    ;; :general
    ;; (emmet-mode-keymap
    ;;  "<M-return>" 'emmet-expand-line
    ;;  "M-h" 'emmet-prev-edit-point
    ;;  "M-l" 'emmet-next-edit-point)
    :hook
    (web-mode . emmet-mode)
    :config
    (setq emmet-move-cursor-after-expanding t)
    (setq emmet-move-cursor-between-quotes t))
#+end_src

*** COMMENT web-selectors
#+begin_src emacs-lisp
  (use-package web-selectors
    :straight  (web-selectors :type git :host github :repo "krdzo/web-selectors")
    :defer t
    :init)
    ;; (add-hook 'css-mode-hook
    ;;           '(lambda () (add-hook 'lsp-completion-mode-hook 'web-selectors-mode nil t)))
    ;; (add-hook 'web-mode-hook
    ;;           '(lambda () (add-hook 'lsp-completion-mode-hook 'web-selectors-mode nil t))))
#+end_src

*** lsp-tailwindcss
#+begin_src emacs-lisp
  (use-package lsp-tailwindcss
    :after lsp-mode
    :init
    (add-hook 'before-save-hook 'lsp-tailwindcss-rustywind-before-save)
    (setq lsp-tailwindcss-major-modes '(rjsx-mode web-mode html-mode typescript-mode))
    (setq lsp-tailwindcss-add-on-mode t)
    (setq lsp-tailwindcss-emmet-completions t))
#+end_src

** Languages

*** Python
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :defer
    :ensure t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))  ; or lsp-deferred
#+end_src

*** common Lisp

Seting ~sbcl~ to be default interpreter for lisp.
#+begin_src emacs-lisp
  (setq inferior-lisp-program "sbcl")
#+end_src

Sly the better SLIME.
#+begin_src emacs-lisp
  (use-package sly
    :defer t
    :config
    (add-hook 'sly-popup-buffer-mode-hook #'(lambda () (meow-normal-mode -1)))
    (setq sly-contribs '(sly-fancy sly-mrepl)))
#+end_src

*** JavaScript
#+begin_src emacs-lisp
  (use-package js
    :defer t

    :config
    (setq js-indent-level 2))
#+end_src

*** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :defer t)
#+end_src

*** rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :defer)
  (use-package cargo
    :hook (rust-mode . cargo-minor-mode))
#+end_src

* COMMENT Notes from old config
** Podsetnik za Info
*** Korisne komande i promenive koje treba znati

+ ~(list-command-history)~ - izlistava istoriju komandi. Komande su izlistane
  detaljno tj. sa svim argumentima itd.
+ =C-x <ESC> <ESC>= ~(repeat-complex-command)~ - daje mogućnost da ponoviš poslednju
  komandu sa promenjenim ili istim argumentima.
+ ~(apropos-user-option)~ - Search for user-customizable variables.  With a prefix
  argument, search for non-customizable variables too.
+ ~(apropos-variable)~ - Search for variables.  With a prefix argument, search for
  customizable variables only.
+ ~show-trailing-whitespace~ - promenjiva, ono sto ime kaže

*** Preskoceno u Emacs Info manual-u
- 11. 12. 13. 17. 22. sekcije Emacs info manual-a su preskočene
- 28.1 tj. VC je letimično pročitan zato sto
  koristim magit ali možda ima nesto pametno da se pročita.
- 28.4.2 i 28.4.3 TAGS preskočen
- 28.6 Emerge preskočen
- 31. 32. 33. 34. preskočeni
- 37. Document viewing preskočen
- 38. do 47. preskočeno
- 49.3.10. i 49.3.11. preskočeno

*** Korisne Info strane da se opet procitaju
16.4 O spellcheck-u
26.2.3 imunu
26.2.4 which-funciton-mode
49.3.4 minibuffer keymap kad se bude customizovao minibufer

*** Kako lakše raditi sa camelCase i snake_case
Postavi global sub word
(global-subword-mode 1)
Sad se =w= komanda kao i sve ostale ponašaju drugačije tj prepoznaju reči u camelcase i razlikuju ih.

vidiSadKakoSePonasaNaOvomPrimeru
vidi_sad_kako_se_ponasa_na_ovom_primeru

onda sa =vaw= ili =viw= opkoliš reč unutar camelcase-a a sa =vao= ili =vio= opkolis ceo simbol, celu promenjivu

- vidi /superword-mode/ Info emacs 26.11

** Notes
*** Korisni paketi koje treba pogledati
- aweshell
- sudo-edit
- quickrun
- crux
- format-all
- instant-rename-tag
- epaint

* COMMENT CV
#+begin_src emacs-lisp
  (use-package ox-moderncv
    :straight nil
    :load-path "/home/ivan/git/org-cv/"
    :init (require 'ox-moderncv))
#+end_src

* mewo proba

** Meow

#+begin_src emacs-lisp
  (defun meow-setup ()
     "My meow setup thats similar to evil/vim"
     (meow-motion-overwrite-define-key
      '("j" . meow-next)
      '("k" . meow-prev)
      '("h" . meow-left)
      '("l" . meow-right)
      '("/" . meow-visit))
     (meow-leader-define-key
      ;; SPC j/k will run the original command in MOTION state.
      '("j" . "H-j")
      '("k" . "H-k")
      '("h" . "H-h")
      '("l" . "H-l")
      '("/" . "H-/")
      ;; Use SPC (0-9) for digit arguments.
      '("1" . meow-digit-argument)
      '("2" . meow-digit-argument)
      '("3" . meow-digit-argument)
      '("4" . meow-digit-argument)
      '("5" . meow-digit-argument)
      '("6" . meow-digit-argument)
      '("7" . meow-digit-argument)
      '("8" . meow-digit-argument)
      '("9" . meow-digit-argument)
      '("0" . meow-digit-argument)
      '("?" . meow-cheatsheet)
      '("/" . meow-keypad-describe-key))
     (meow-normal-define-key
      '("0" . meow-expand-0)
      '("9" . meow-expand-9)
      '("8" . meow-expand-8)
      '("7" . meow-expand-7)
      '("6" . meow-expand-6)
      '("5" . meow-expand-5)
      '("4" . meow-expand-4)
      '("3" . meow-expand-3)
      '("2" . meow-expand-2)
      '("1" . meow-expand-1)
      '("-" . negative-argument)
      '("[" . meow-beginning-of-thing)
      '("]" . meow-end-of-thing)

      '("q" . meow-cancel-selection)
      '("u" . meow-undo)
      '("U" . meow-undo-in-selection)
      '("y" . meow-save)
      '("Y" . kr-meow-save-line)

      '("p" . meow-yank)
      '("i" . meow-insert)
      '("a" . meow-append)

      '("j" . meow-next)
      '("M-j" . (lambda () (interactive) (scroll-up-line)))
      '("k" . meow-prev)
      '("M-k" . (lambda () (interactive) (scroll-down-line)))
      '("h" . meow-left)
      '("l" . meow-right)

      '("J" . meow-next-expand)
      '("K" . meow-prev-expand)
      '("H" . meow-left-expand)
      '("L" . meow-right-expand)
      '("c" . meow-change)
      '("X" . meow-delete)
      '("x" . meow-backward-delete)
      '("w" . meow-mark-word)
      '("W" . meow-mark-symbol)
      '("n" . meow-search)
      '("d" . meow-kill)
      '("D" . meow-kill-whole-line)
      '("/" . meow-visit)

      '("e" . meow-next-word)
      '("E" . meow-next-symbol)
      '(";" . meow-reverse)
      '("," . meow-inner-of-thing)
      '("." . meow-bounds-of-thing)
      '("[" . meow-beginning-of-thing)
      '("]" . meow-end-of-thing)
      '("b" . meow-back-word)
      '("B" . meow-back-symbol)
      '("v" . meow-line)
      '("f" . meow-find)
      '("t" . meow-till)
      '("G" . meow-grab)
      '("r" . meow-replace)
      '("R" . meow-swap-grab)
      '("m" . meow-join)

      '("o" . meow-block)
      '("<return>" . meow-open-below)
      '("S-<return>" . meow-open-above)


      '("I" . meow-inner-of-thing)
      '("A" . meow-bounds-of-thing)
      '("C-r" . undo-tree-redo)))
      ;; help at point


   ;;    '("m" . meow-join)
   ;;    '("O" . meow-to-block)
   ;;    '("q" . meow-quit)

   ;;    '("Y" . meow-sync-grab)
   ;;    '("z" . meow-pop-selection)
   ;;    '("'" . repeat)
   ;;    '("<escape>" . mode-line-other-buffer)))

  (use-package meow
    :init
    :config
    (setq meow-use-clipboard t)
    (setq meow-mode-state-list (delete '(help-mode . normal) meow-mode-state-list))
    (setq meow-char-thing-table '((?\( . round)
                                  (?r . round)
                                  (?\[ . square)
                                  (?\{ . curly)
                                  (?s . string)
                                  (?\" . string)
                                  (?\' . string)
                                  (?W . symbol)
                                  (?b . buffer)
                                  (?p . paragraph)
                                  (?l . line)
                                  (?d . defun)
                                  (?x . extend)
                                  (?. . sentence)
                                  (?i . indent)))
    (meow-setup)
    (meow-global-mode 1))
#+end_src

** config for extending meow

Funciton and advices for making meow behave like I like it.

#+begin_src emacs-lisp
  ;; (defun kr-meow-append ()
  ;;  "Make `meow-append' behavior similar to evil-append."
  ;;  (unless (and (not mark-active) (= (line-end-position) (point)))
  ;;    (forward-char 1)))
  ;; (advice-add 'meow-append :before #'kr-meow-append)
  ;; (advice-remove 'meow-append #'kr-meow-append)

   ;;;;;;;;;;;;;;;
  (defun kr-meow-maybe-digit (fun n)
    "One more advice so that I can get digit arguments if there is no
   selection active and expand selestion if the selection is active."
    (if mark-active
        (funcall fun n)
      (call-interactively #'digit-argument)))
  (advice-add 'meow-expand :around #'kr-meow-maybe-digit)
   ;;;;;;;;;;;;;;;

  (defun kr-meow-space-kill (_)
    "Delete space after a word is deleted, and not leave two spaces behind."
    (when (= (char-after) (string-to-char " "))
      (meow-delete)))
  ;; (advice-add 'meow-kill :after #'kr-meow-space-kill)
  ;; (advice-remove 'meow-kill #'kr-meow-space-kill)

  (setq meow-use-cursor-position-hack nil)

  (defun kr-meow-insert-exit ()
    "Change `meow-insert-exit' to exit before point like evil/vim."
    (unless (= (line-beginning-position) (point))
      (backward-char 1)))
  ;; (advice-add 'meow-insert-exit :after #'ispravi-meow-insert-exit)

  (defun kr-na-pocetak-linije ()
    "Go to beginning of the line and enter intsert mode"
    (interactive)
    (back-to-indentation)
    (meow-insert))

  (defun kr-na-kraj-linije ()
    "Go to end of the line and go to insert state"
    (interactive)
    (end-of-visual-line)
    (meow-append))

  (defun kr-meow-save-line ()
    (interactive)
    (save-excursion
      (call-interactively #'meow-line)
      (call-interactively #'meow-save)))

  (defun ubaci-minus-umesto-reverse-ako-nema-selekcije (fun)
    "Attemt to reverse command when there is no selection."
    (if mark-active
        (funcall fun)
      (negative-argument 1)))
  (advice-add 'meow-reverse :around #'ubaci-minus-umesto-reverse-ako-nema-selekcije)
#+end_src

** General meow definders
#+begin_src emacs-lisp
  (general-create-definer kr-define-meow-leader-keys
    :keymaps 'meow-leader-keymap)
  (general-create-definer kr-define-meow-normal-keys
    :keymaps 'meow-normal-state-keymap)
#+end_src

** meow leader keys with general

This is impractical and should be all in ~meow-setup~ but for now it is here.

#+begin_src emacs-lisp
  ;; buffer
  (kr-define-meow-leader-keys
    "bd" 'kill-current-buffer
    "br" 'revert-buffer
    "bb" 'consult-buffer
    "bs" '((lambda () (interactive)
             (switch-to-buffer "*scratch*"))
           :wk "scratch"))

  ;; window
  (kr-define-meow-leader-keys
    "wd" 'delete-window
    "ws" 'split-window-below
    "ww" 'other-window
    "wW" 'window-swap-states
    "wo" 'delete-other-windows
    "wv" 'split-window-right)

  ;; register
  (kr-define-meow-leader-keys
    "ff" 'find-file
    "fr" 'jump-to-register)

  (kr-define-meow-leader-keys
    "i" 'consult-imenu)

  (kr-define-meow-leader-keys
    "v" 'magit-status
    "p" project-prefix-map)

  (kr-define-meow-normal-keys
    "{" 'backward-paragraph
    "}" 'forward-paragraph)
#+end_src

** (g) menu options

#+begin_src emacs-lisp
  (kr-define-meow-normal-keys
    "gf" 'find-file-at-point)
#+end_src

** company meow bindings

#+begin_src emacs-lisp
  (general-def company-active-map
    "C-j" 'company-select-next-or-abort
    "C-k" 'company-select-previous-or-abort
    "M-h" 'company-show-doc-buffer)
#+end_src

** [ and ] modification for meow
#+begin_src emacs-lisp
  (kr-define-meow-normal-keys
    "[" (general-key-dispatch 'meow-beginning-of-thing
          :timeout 0.5
          "t" 'hl-todo-previous
          "g" 'git-gutter:previous-hunk)
    "]" (general-key-dispatch 'meow-end-of-thing
          :timeout 0.5
          "t" 'hl-todo-next
          "g" 'git-gutter:next-hunk))
#+end_src

** Emacs binding for meow keypad
Here I change emacs build in keybindings for better meow ergonomics.
For example because I use ~dired~ that is bound to =C-x d= more often then ~list-direcory~ that is bound to =C-x C-d= so I will swap those two commands so I can type =SPC x d= to acces dired faster with ~meow-keypad~.
#+begin_src emacs-lisp
  (general-def
    "C-x d" 'list-directory
    "C-x C-d" 'dired)
#+end_src

** COMMENT meow thing experimentation

How to make new things for ~meow-*-of-thing~ functions.

#+begin_src emacs-lisp
  (defvar kr-meow-filename-thing-funcitons
    (filename
     ((lambda () (bounds-of-thing-at-point 'filename))
      . (lambda () (let ((fbnd (bounds-of-thing-at-point 'filename)))
                     (cons (1- (car fbnd))
                           (1+ (cdr fbnd)))))))
    "This value goes to `meow--thing-registry' so that it can find filename
  under point with `meow-inner-of-thing' and releated functions.")
  ;; also this must be added to make filename thing selection work)
  (add-to-list 'meow-char-thing-table '(?f . filename))
#+end_src

** COMMENT meow palyground

#+begin_src emacs-lisp :tangle no
  (setq mark-ring nil)
  (car mark-ring)
  (goto-char (car mark-ring))
  (meow-normal-define-key
   '("%" . evilmi-jump-items))

  (meow-normal-define-key
   '("[t" .))
#+end_src

** help at point everywhere
=C-x M-k= will be the "help key" and it will always be bound to help-at-point function most appropriate for current mode.
#+begin_src emacs-lisp
  (defvar kr-help-key "C-x M-k"
    "Key chord that I use for help under point.")

  ;; set meow to point to `help-key'
  (general-define-key
   :keymaps '(meow-normal-state-keymap meow-motion-state-keymap)
   "M-h" kr-help-key)
#+end_src

Here change help for different modes.
#+begin_src emacs-lisp
  ;; set Globally `help-key' to helpful
  (general-define-key kr-help-key 'helpful-at-point)

  ;; set `help-key' in specific states
  (general-define-key :keymaps 'lsp-mode-map
   kr-help-key 'lsp-describe-thing-at-point)
  (general-define-key :keymaps 'sly-mode-map
   kr-help-key 'sly-describe-symbol)
#+end_src

* COMMENT read-only-buffer keybinding

#+begin_src emacs-lisp
  (defun kr-read-only-binidngs ()
    (when buffer-read-only
      (make-local-variable 'meow-motion-state-keymap)
      (general-def 'meow-motion-state-keymap
        "r" 'kr-test)))

  (add-hook 'special-mode-hook 'kr-read-only-binidngs)
  (add-hook 'Info-mode 'kr-read-only-binidngs)

#+end_src
