#+title: DotEmacs
#+author: Krdzo
#+startup: fold

* Introduction
This config is primarily inspired from [[https://www.lucacambiaghi.com/vanilla-emacs/readme.html#h:16B948EA-5375-44DE-ACD7-3664D4A9CE5F][here]] and most of this is directly taken from there.

* Bootstrap Straight.el

I'm using straight in combination with use-package for package management.

Some rules/conventions:
- Prefer ~:init~ to ~:custom~. Prefer multiple ~setq~ expressions to one.
- Default to ~:defer t~, use ~:demand~ to force loading
- When packages do not require installation e.g. ~dired~, we need ~:straight (:type built-in)~
- If you specify ~:commands~, they will be autoloaded and the package will be loaded when the commands are first executed
    + If you use ~:general~ and bind commands to keys it will automatically load the package on first invokation

NOTE: if you change a package recipe from ~melpa~ to ~github~ in a ~use-package~
block but that package is used as a dependency is used in a previous
~use-package~ block with a ~melpa~ recipe, you will get a warning. Just make
sure to declare the "base" package with the ~github~ recipe first.

NOTE: for ~straight-cache-autoloads~ you must run ~straight-prune-build~ ocaisonaly so that you keep you straight config clean.
#+begin_src emacs-lisp
  (setq straight-vc-git-default-clone-depth 1)
  (setq straight-recipes-gnu-elpa-use-mirror t)
  (setq straight-check-for-modifications '(check-on-save find-when-checking))
  (defvar bootstrap-version)
  (let* ((straight-repo-dir
          (expand-file-name "straight/repos" user-emacs-directory))
         (bootstrap-file
          (concat straight-repo-dir "/straight.el/bootstrap.el"))
         (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (shell-command
       (concat
        "mkdir -p " straight-repo-dir " && "
        "git -C " straight-repo-dir " clone "
        "https://github.com/raxod502/straight.el.git && "
        "git -C " straight-repo-dir " checkout 2d407bc")))
    (load bootstrap-file nil 'nomessage))

  ;; This is a variable that has been renamed but straight still refers when
  ;; doing :sraight (:no-native-compile t)
  ;; (setq comp-deferred-compilation-black-list nil)

  ;; adding syntax highlight for straight-use-package
  (add-hook 'emacs-lisp-mode-hook
            #'(lambda ()
                (font-lock-add-keywords nil
                  '(("\\_<straight-use-package\\_>" . font-lock-keyword-face)))))

#+end_src

* Utilities
Utility packages that add functions that make configuration easier or configure some aspect of Emacs so that I don't have to.

** Measuring start-up

I like to know how fast Emacs has started.
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            #'(lambda ()
                (message "Emacs ready in %s with %d garbage collections."
                         (emacs-init-time)
                         gcs-done)))
#+end_src

** Blackout
For keeping mode line clean.
#+begin_src emacs-lisp
  (straight-use-package 'blackout)
#+end_src

** General
Helper functions for configuring keybindings, hooks and many more.
There is ~general-def~ that's is used for keybinding,
~general-setq~ that is used for setting "customize" variables,
~general-add-hook~, ~general-remove-hook~ for adding or removing hooks in bulk (can add to more that one hook at a time and more than one function at the time),
~general-advice-add~, ~general-advice-remove~ for adding and removing advice... There are some others but I don't use them.
There is also ~use-package~ integration for all of these functions and they are:
[[https://github.com/noctuid/general.el#general-keyword][:general]] for ~general-def~
[[https://github.com/noctuid/general.el#general-keyword][:ghook]] and [[https://github.com/noctuid/general.el#general-keyword][:gfhook]] for ~general-add-hook~

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'general)
  (general-def
    "C-h l" 'find-library)
#+END_SRC

** ghelp
#+begin_src emacs-lisp
  (straight-use-package '(ghelp :type git :host github :repo "casouri/ghelp"))
#+end_src

** Garbage collector magic hack
What the title says.
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'gcmh)
  (gcmh-mode 1)
  (setq gcmh-idle-delay 5)
  (blackout 'gcmh-mode)
#+END_SRC

** no littering
Helping me so that I don't have to configure Emacs not to clutter .emacs.d.
#+begin_src emacs-lisp
  (straight-use-package 'no-littering)
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  ;; here because it needs to be after no-littering
  ;; should be moved somewhere else
  (when (file-exists-p custom-file)
    (load-file custom-file))
#+end_src

** which-key
Help with discovery of keybindings.
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'which-key)
  (setq which-key-idle-delay 0.5)
  (add-hook 'after-init-hook 'which-key-mode)
  (with-eval-after-load 'which-key
    (blackout 'which-key-mode))
#+END_SRC

** helpful
Better help than built-in help.
#+name: helpful
#+BEGIN_SRC emacs-lisp :tangle no
  (straight-use-package 'helpful)
  (add-hook 'helpful-mode-hook 'visual-line-mode)
  (general-def
    "C-z h" 'helpful-at-point
    [remap describe-symbol] 'helpful-symbol
    [remap describe-function] 'helpful-callable
    [remap describe-command] 'helpful-command
    [remap describe-variable] 'helpful-variable
    [remap describe-key] 'helpful-key)

#+END_SRC

** elisp-demos
Small snippets in help buffer that show how a function is used.
#+begin_src emacs-lisp
  (straight-use-package 'elisp-demos)
  (with-eval-after-load 'helpful
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src

* Keybindings
Setup keybindings for builtin features that are not tied to any mode.
** Bind-map
For easyer setup for keymaps.
#+begin_src emacs-lisp
  (straight-use-package 'bind-map)
#+end_src

** Go to [] menu
#+begin_src emacs-lisp
  (bind-map kr-<b-menu-map
    :keys ("M-n M-[")
    :bindings ("b" 'beginning-of-buffer
               "l" 'beginning-of-line-text))

  (bind-map kr->b-menu-map
    :keys ("M-n M-]")
    :bindings ("b" 'end-of-buffer
               "l" 'end-of-line))
#+end_src

** (g) menu
#+begin_src emacs-lisp
  (bind-map kr-gmenu-map
    :keys ("M-n M-g")
    :bindings ("c" 'recompile
               "C" 'compile
               "h" 'beginning-of-line-text
               "l" 'end-of-line
               "f" 'find-file-at-point))

#+end_src

** Toggle
#+begin_src emacs-lisp
  (bind-map kr-toggle-map
    :keys ("M-n M-t")
    :bindings ("d" 'toggle-debug-on-error
               "l" 'display-line-numbers-mode
               "V" 'toggle-truncate-lines
               "v" 'visual-line-mode
               "r" 'read-only-mode))
#+end_src

** Help
Help at point key is =C-z h=. Every mode that implements a help at point needs to change it to point to it's "help-at-point" function
#+begin_src emacs-lisp :noweb yes
  (define-key global-map (kbd "C-z") nil)
  (general-def
    "C-z h" 'describe-symbol)
  <<helpful>>
#+end_src

** Window
#+begin_src emacs-lisp
  (defvar kr-window-map (make-sparse-keymap)
    "Personal keymap for windows.")

  (general-def kr-window-map
    "d" 'delete-window
    "s" 'split-window-below
    "w" 'other-window
    "W" 'window-swap-states
    "o" 'delete-other-windows
    "v" 'split-window-right)

  (general-def
    "C-x M-w" kr-window-map)
#+end_src

** Buffer
#+begin_src emacs-lisp
  (defvar kr-buffer-map (make-sparse-keymap)
    "Personal keymap for buffers.")

  (defun kr-go-to-scratch ()
    (interactive)
    (switch-to-buffer "*scratch*"))

  (general-def kr-buffer-map
    "d" 'kill-current-buffer
    "r" 'revert-buffer
    "s" 'kr-go-to-scratch)

  (general-def
    "C-x M-b" kr-buffer-map)
#+end_src

** Files

#+begin_src emacs-lisp
  (defvar kr-file-map (make-sparse-keymap))
  (general-def
    "C-x M-f" kr-file-map)
  (general-def kr-file-map
    "r" 'jump-to-register
    "f" 'find-file
    "s" 'save-buffer
    "j" 'dired-jump)
#+end_src

** transient mode
This is manly for magit but can be used for some other funcitonality.
#+begin_src emacs-lisp
  (general-def transient-base-map
    "<escape>" 'transient-quit-one)
#+end_src

* Emacs
Here is configuration that concerns Emacs builtin features.
Changing options, enabling and configuring modes etc.
Big packages like org-mode will get their own section.
** Sane defaults

Inspired by https://github.com/natecox/dotfiles/blob/master/emacs/emacs.d/nathancox.org

To debug a LISP function use ~debug-on-entry~. You step /in/ with =d= and /over/ with =e=

#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil
         sentence-end-double-space nil
         ring-bell-function 'ignore
         frame-resize-pixelwise t)
  (setq help-window-select t)

    ;; (setq user-full-name "Luca Cambiaghi"
    ;;       user-mail-address "luca.cambiaghi@me.com")

    ;; always allow 'y' instead of 'yes'.
  (defalias 'yes-or-no-p 'y-or-n-p)

    ;; default to utf-8 for all the things
  (set-language-environment "UTF-8")

    ;; follow symlinks
  (setq vc-follow-symlinks t)

    ;; don't show any extra window chrome
  (when (window-system)
    (tool-bar-mode -1)
    (toggle-scroll-bar -1))

    ;; less noise when compiling elisp
    ;; (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
    ;; (setq native-comp-async-report-warnings-errors nil)
  (setq load-prefer-newer t)

    ;; use common convention for indentation by default
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

    ;; Enable indentation+completion using the TAB key.
    ;; Completion is often bound to M-TAB.
  (setq tab-always-indent 'complete)

    ;; Delete files to trash
  (setq delete-by-moving-to-trash t)

    ;; Uniquify buffer names
  (setq-default uniquify-buffer-name-style 'forward)

    ;; Better scrolling behaviour
  (setq-default
   hscroll-step 1
   scroll-margin 4
   hscroll-margin 4
   mouse-yank-at-point t
   auto-window-vscroll nil
   mouse-wheel-scroll-amount '(1)
   mouse-wheel-tilt-scroll t
   mouse-wheel-flip-direction t
   scroll-conservatively most-positive-fixnum)

    ;; Better interaction with clipboard
  (setq-default save-interprogram-paste-before-kill t)

    ;; Some usefull builtin minor modes
    ;; (save-place-mode 1)
  (blink-cursor-mode 0)
  (column-number-mode 1)
  (global-auto-revert-mode 1)

    ;; Maybe gives some optimization
  (add-hook 'focus-out-hook #'garbage-collect)

  (tooltip-mode -1)

    ;; delete whitespace
  (add-hook 'before-save-hook #'whitespace-cleanup)
#+END_SRC

** help
#+begin_src emacs-lisp
  (add-hook 'help-mode-hook 'visual-line-mode)
#+end_src

** Subword

#+begin_src emacs-lisp
  (global-subword-mode 1)
  (blackout 'subword-mode)
#+end_src

** Visual line mode
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'visual-line-mode)
  (blackout 'visual-line-mode)
#+end_src

** eldoc
#+begin_src emacs-lisp
  (straight-use-package 'eldoc)
  (general-add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (with-eval-after-load 'eldoc
    (blackout 'eldoc-mode))
#+end_src

** recentf
#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-saved-items 75)
  (setq recentf-exclude `(,(expand-file-name "straight/build/" user-emacs-directory)
                          ,(expand-file-name "eln-cache/" user-emacs-directory)))
  ;;                         ,(expand-file-name "etc/" user-emacs-directory)
  ;;                         ,(expand-file-name "var/" user-emacs-directory)
#+end_src

** save-place
#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src

** Configurating so-long.el
When emacs load files with long lines it can block or crash so this minor mode
is there to prevent it from doing that.

#+begin_src emacs-lisp
  (setq-default bidi-paragraph-direction 'left-to-right)
  (setq bidi-inhibit-bpa t)
  (global-so-long-mode 1)
#+end_src

** File registers
*** Open config

#+begin_src emacs-lisp
  (set-register ?c `(file . ,(expand-file-name kr/config-org user-emacs-directory)))
  (set-register ?i `(file . ,(expand-file-name "init.el" user-emacs-directory)))
#+end_src

*** Personal
#+begin_src emacs-lisp
  (set-register ?t `(file . "~/Documents/from-home/terapija.org"))
#+end_src

** Written Languages

*** Serbian
I making a custom input method for Serbian language because all the other methods that exist are stupid.
[[https://satish.net.in/20160319/][Reference how to make custom input method]].

#+begin_src emacs-lisp
  (quail-define-package
   "serbian-latin" "Serbian" "SR" nil
   "Sensible Serbian keyboard layout."
    nil t nil nil nil nil nil nil nil nil t)

  (quail-define-rules
   ("x" ?š)
   ("X" ?Š)
   ("w" ?č)
   ("W" ?Č)
   ("q" ?ć)
   ("Q" ?Ć)
   ("y" ?ž)
   ("Y" ?Ž)
   ("dj" ?đ)
   ("Dj" ?Đ)
   ("DJ" ?Đ))
#+end_src
This input method changes all English keys with Serbian.

Set =serbian-latin= to default input method.
#+begin_src emacs-lisp
  (setq default-input-method "serbian-latin")
#+end_src

*** Spelling
#+begin_src emacs-lisp
  (setq ispell-program-name "/usr/bin/aspell")
#+end_src

** Calendar

#+begin_src emacs-lisp
  (setq calendar-date-style 'european)
  (setq calendar-week-start-day 1)
#+end_src

** Ediff
#+begin_src emacs-lisp
  ;; (winner-mode 1)
  (add-hook 'ediff-after-quit-hook-internal 'winner-undo)
  (general-setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (general-setq ediff-split-window-function 'split-window-horizontally)
#+end_src

* Completion framework
** selectrum
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'selectrum)
  (selectrum-mode t)

  (setq selectrum-count-style 'current/matches)

  (general-def 'selectrum-minibuffer-map
    "C-r" 'evil-paste-from-register
    "C-j" 'selectrum-next-candidate
    "C-k" 'selectrum-previous-candidate
    "M-j" 'next-history-element
    "M-k" 'previous-history-element)
  (general-def
    "M-c" 'selectrum-repeat)
#+END_SRC

** prescient
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'prescient)
  (require 'prescient)
  (prescient-persist-mode 1)

  (straight-use-package 'selectrum-prescient)
  (selectrum-prescient-mode 1)
#+END_SRC

** marginalia
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'marginalia)
  (marginalia-mode 1)
  (setq marginalia-annotators '(marginalia-annotators-heavy
                                  marginalia-annotators-light nil))
#+END_SRC

** consult
To search for multiple words with ~consult-ripgrep~ you should search e.g. for
~#defun#some words~ . The first filter is passed to an async ~ripgrep~ process
and the second filter to the completion-style filtering (?).

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'consult)

  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  (setq consult-preview-key nil)

  (general-def
    "C-x M-b b" 'consult-buffer
     [remap switch-to-buffer] 'consult-buffer
     [remap apropos-command] 'consult-apropos)
#+END_SRC

** embark
- You can act on candidates with =C-l= and ask to remind bindings with =C-h=
- You can run ~embark-export~ on all results (e.g. after a ~consult-line~) with =C-l E=
  + You can run ~embark-export-snapshot~ with =C-l S=

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'embark)
  (general-def selectrum-minibuffer-map
    "C-l" 'embark-act)
#+END_SRC

*** embark-consult
#+begin_src emacs-lisp
  (straight-use-package 'embark-consult)
#+end_src

** dabbrev
#+begin_src emacs-lisp
  (general-def
    "M-/" 'dabbrev-completion
    "C-M-/" 'dabbrev-expand)
#+end_src

** abbrev
#+begin_src emacs-lisp
  (with-eval-after-load 'abbrev
    (blackout 'abbrev-mode))
#+end_src

** Company
*** company-mode
~company-tng-mode~ (tab-n-go):
- Select candidates with =C-j= / =C-k= or =TAB= / =S-TAB=
- don't press =RET= to confirm

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'company-mode)
  (setq completion-styles '(basic partial-completion flex))
  (setq company-dabbrev-downcase nil)
  (setq company-dabbrev-ignore-case nil)
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1)
  (setq company-selection-wrap-around t)
  (setq company-global-modes '(not help-mode
                                   eshell-mode
                                   helpful-mode
                                   gud-mode))
  (setq company-backends '(company-files company-capf company-keywords company-yasnippet))
  (general-def company-active-map
    "C-j" 'company-select-next-or-abort
    "C-k" 'company-select-previous-or-abort
    "M-h" 'company-show-doc-buffer)

  (add-hook 'after-init-hook 'global-company-mode)

#+END_SRC

*** company prescient
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'company-prescient)
  (company-prescient-mode 1)
#+END_SRC

** corfu
#+begin_src emacs-lisp
  (straight-use-package 'corfu)
  (general-def 'corfu-map
    "C-g" 'corfu-abort
    "C-j" 'corfu-next
    "C-k" 'corfu-previous)
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (org-mode . corfu-mode))
    ;; :config
    ;; (add-to-list 'corfu--frame-parameters '(tab-bar-lines . 0))
    ;; (defun lc/disable-tabs (orig-fn &rest args)
    ;;   (progn (centaur-tabs-local-mode) (apply orig-fn args)))
    ;; (defun lc/reenable-tabs (orig-fn &rest args)
    ;;   (progn (centaur-tabs-local-mode -1) (apply orig-fn args)))
    ;; (advice-add 'corfu--popup-show :around #'lc/disable-tabs)
    ;; (advice-add 'corfu--popup-hide :around #'lc/reenable-tabs)
    ;; Optionally enable cycling for `corfu-next' and `corfu-previous'.
    ;; (setq corfu-cycle t)
#+end_src

* UI
** Font

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 115)
#+end_src

** Themes

#+begin_src emacs-lisp
  ;; list of ok themes:
  ;; doom-dark+
  ;; doom-hena
  ;; doom-snazy
  ;; doom-dracula
  ;; doom-Iosvkem
  ;; doom-old-hope
  ;; doom-palenight
  ;; doom-city-lights
  ;; dom-ocean-next

  ;; base16-themes
  ;; dune
  ;; heath
  ;; brewer
  ;; bright
  ;; chalk
  ;; google-dark

  (straight-use-package 'doom-themes)
  (load-theme 'doom-dark+ t)

  ;; global-hl-line-mode and region have the same color so i change it here
  (set-face-attribute 'region nil :background "#454545")
  (set-face-attribute 'secondary-selection nil :background "#701818")
  (set-face-attribute 'highlight nil :background "#454545")

  ;; theme that doesn't work for now
  ;; (straight-use-package '(uwu.el :repo "kborling/uwu.el"))
  ;; (load-file "~/.config/emacs/straight/repos/uwu.el/uwu.el")

  ;; themes for cheking out
  ;; misterioso
#+end_src

** Start-up maximized
#+begin_src emacs-lisp
  (when window-system
    (add-to-list 'initial-frame-alist '(fullscreen . maximized)))
#+end_src

* Org

#+begin_src emacs-lisp
  ;; ;; https://orgmode.org/manual/Labels-and-captions-in-ODT-export.html
  ;; (setq org-odt-category-map-alist
  ;;       '(("__Figure__" "Slika" "value" "Figure" org-odt--enumerable-image-p)))
  (require 'org-tempo)
  (add-to-list 'org-modules 'org-tempo t)
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))

  (setq org-startup-indented t)
  (setq org-image-actual-width 700)
  (setq org-M-RET-may-split-line nil)
  (setq org-return-follows-link t)
  (setq org-src-window-setup 'current-window)

  (with-eval-after-load 'org-indent
    (blackout 'org-indent-mode))
#+end_src

* Dired

NOTE - dired enhancement packages: dired-postframe, dired-git, dired-filter, dired-narow

** dired
#+begin_src emacs-lisp
  (setq dired-dwim-target t)
  (setq dired-isearch-filenames 'dwim)
  (setq dired-recursive-copies 'always)
  (setq dired-recursive-deletes 'always)
  (setq dired-create-destination-dirs 'always)
  (setq dired-listing-switches "-valh --group-directories-first")

  (add-hook 'dired-mode-hook 'toggle-truncate-lines)
  (add-hook 'dired-mode-hook #'(lambda () (unless (file-remote-p default-directory)
                                            (auto-revert-mode))))
 #+end_src

** dired-x
#+begin_src emacs-lisp
  ;; (setq dired-clean-confirm-killing-deleted-buffers nil)

  ;; dired-x will help to remove buffers that were associated with deleted
  ;; files/directories

  ;; to not get y-or-no question for killing buffers when deliting files go here for
  ;; inspiration on how to do it
  ;; https://stackoverflow.com/questions/11546639/dired-x-how-to-set-kill-buffer-of-too-to-yes-without-confirmation
  ;; https://emacs.stackexchange.com/questions/30676/how-to-always-kill-dired-buffer-when-deleting-a-folder
  ;; https://www.reddit.com/r/emacs/comments/91xnv9/noob_delete_buffer_automatically_after_removing/
#+end_src

** COMMENT dired-sidebar
#+begin_src emacs-lisp
  (u-p dired-sidebar
    :commands (dired-sidebar-toggle-sidebar)
    :config
    (setq dired-sidebar-width 30))

#+end_src

** all-the-icons-dired

#+begin_src emacs-lisp
  (straight-use-package 'all-the-icons-dired)

  (when (display-graphic-p)
    (add-hook 'dired-mode-hook #'(lambda () (interactive)
                                  (unless (file-remote-p default-directory)
                                    (all-the-icons-dired-mode)))))
#+end_src

** dired-hacks

*** COMMENT dired-k
#+begin_src emacs-lisp
  (u-p dired-k
    :disabled
    :hook
    ((dired-initial-position . dired-k)
     (dired-after-readin . dired-k-no-revert))
    :config
    (setq dired-k-style 'git)
    (setq dired-k-human-readable t)
    ;; so that dired-k plays nice with dired-subtree
    (advice-add 'dired-subtree-insert :after 'dired-k-no-revert))
#+end_src

*** dired-subtree
#+begin_src emacs-lisp
  (straight-use-package 'dired-subtree)

  (general-def dired-mode-map
    "TAB" 'dired-subtree-toggle)
  (advice-add 'dired-subtree-toggle
              :after #'(lambda ()
                         (interactive)
                         (call-interactively #'revert-buffer)))
#+end_src

*** dired-reinbow
#+begin_src emacs-lisp
  (straight-use-package 'dired-rainbow)
  (require 'dired-rainbow)

  (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
  (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
  (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
  (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
  (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
  (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
  (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
  (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
  (dired-rainbow-define log "#c17d11" ("log"))
  (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
  (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
  (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
  (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
  (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
  (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
  (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
  (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
  (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
  (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
  (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")
#+end_src

* Uncategorized packages
Here are packages that don't belong to any category.

** ibuffer
#+begin_src emacs-lisp
  (general-def
    [remap list-buffers] 'ibuffer)
#+end_src

** hydra
#+begin_src emacs-lisp
  (straight-use-package 'hydra)
#+end_src

** yasnippet
We use =C-TAB= to expand snippets instead of =TAB= .

You can have ~#condition: 'auto~ for the snippet to auto-expand.

See [[http://joaotavora.github.io/yasnippet/snippet-organization.html#org7468fa9][here]] to share snippets across modes

#+begin_src emacs-lisp
  ;; ((defun lc/yas-try-expanding-auto-snippets ()
  ;;    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
  ;;      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
  ;;        (yas-expand))))
  ;;  :config
  ;;  (add-hook 'post-command-hook #'lc/yas-try-expanding-auto-snippets))

  (straight-use-package 'yasnippet)
  (with-eval-after-load 'yasnippet
    (blackout 'yas-minor-mode))

  (add-hook 'yas-minor-mode-hook #'yas-reload-all)

  (defun check-expansion ()
    (save-excursion
     (if (looking-at "\\_>") t
       (backward-char 1)
       (if (looking-at "\\.") t
         (backward-char 1)
         (if (looking-at "->") t nil)))))

  (defun do-yas-expand ()
    (let ((yas-fallback-behavior 'return-nil))
      (yas-expand)))

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas-minor-mode)
              (null (do-yas-expand)))
          (if (check-expansion)
              (company-complete-common)
            (indent-for-tab-command)))))

  (general-def company-active-map
    "<tab>" 'tab-indent-or-complete)

  (straight-use-package 'yasnippet-snippets)
#+end_src

** olivetti
#+begin_src emacs-lisp
  (straight-use-package 'olivetti)
  (setq olivetti-body-width 90)
#+end_src

** perspective
#+begin_src emacs-lisp
  (straight-use-package 'perspective)
#+end_src

** hl-todo
#+begin_src emacs-lisp
  (straight-use-package 'hl-todo)

  (add-hook 'prog-mode-hook 'hl-todo-mode)

  (general-def kr-<b-menu-map
    "t" 'hl-todo-previous)
  (general-def kr->b-menu-map
    "t" 'hl-todo-next)
  (setq hl-todo-highlight-punctuation ":")
  (setq hl-todo-keyword-faces
      '(("TODO"   . "#FF4500")
        ("FIXME"  . "#FF0000")
        ("DEBUG"  . "#A020F0")
        ("GOTCHA" . "#FF4500")
        ("STUB"   . "#1E90FF")))
#+end_src

** undo-tree
#+begin_src emacs-lisp
  (straight-use-package 'undo-tree)
  (global-undo-tree-mode 1)
  (general-def undo-tree-visualizer-mode-map
    "h" 'undo-tree-visualize-switch-branch-left
    "l" 'undo-tree-visualize-switch-branch-right)
  (blackout 'undo-tree-mode)
#+end_src

* Programing

** Hooks for prog mode
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'visual-line-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'toggle-truncate-lines)
#+end_src

** LSP
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'lsp-mode)

  (setq lsp-keymap-prefix "C-c l")
  (setq lsp-completion-provider :none)  ; don't change company-backends
  (setq read-process-output-max (* 1024 1024))

  (general-add-hook '(c-mode-hook
                      js-mode-hook
                      json-mode-hook
                      web-mode-hook
                      css-mode-hook
                      python-mode-hook)
                    #'lsp-deferred)
  (general-add-hook 'lsp-mode-hook '(yas-minor-mode
                                     lsp-enable-which-key-integration))

  (general-define-key
     :keymaps 'kr-gmenu-map
     :predicate 'lsp-mode
     "r" 'lsp-rename
     "=" 'lsp-format-buffer
     "a" 'lsp-execute-code-action)
  (general-define-key
   :keymaps 'lsp-mode-map
   "C-z h" 'lsp-describe-thing-at-point)

  (with-eval-after-load 'lsp-lens
    (blackout 'lsp-lens-mode))

    ;; (setq lsp-restart 'ignore)
    ;; (setq lsp-eldoc-enable-hover nil)
    ;; (setq lsp-enable-file-watchers nil)
    ;; (setq lsp-signature-auto-activate nil)
    ;; (setq lsp-modeline-diagnostics-enable nil)
    ;; (setq lsp-keep-workspace-alive nil)
    ;; (setq lsp-auto-execute-action nil)
    ;; (setq lsp-before-save-edits nil)
    ;; (setq lsp-diagnostics-provider :flymake)
#+END_SRC

** DAP mode
#+begin_src emacs-lisp
  (straight-use-package 'dap-mode)
  (add-hook 'lsp-mode-hook 'dap-mode)
  (add-hook 'python-mode-hook #'(lambda () (require 'dap-python)))
  (add-hook 'java-mode-hook #'(lambda () (require 'dap-java)))
  (add-hook 'dap-stopped-hook #'(lambda (arg) (call-interactively #'dap-hydra)))
#+end_src

** Git
*** Magit
#+begin_src emacs-lisp
  (straight-use-package 'magit)
  (setq git-commit-fill-column 72)
  (with-eval-after-load 'magit
    (dolist (face '(magit-diff-added
                    magit-diff-added-highlight
                    magit-diff-removed
                    magit-diff-removed-highlight))
      (set-face-background face (face-attribute 'magit-diff-context-highlight :background)))
    (set-face-background 'magit-diff-context-highlight
                           (face-attribute 'default :background)))
#+end_src

*** Git-gutter
If I ever need to change to margin I can use this to setup diff-hl in margin
https://github.com/jimeh/.emacs.d/blob/master/modules/version-control/siren-diff-hl.el
#+begin_src emacs-lisp
  (straight-use-package 'git-gutter-fringe)
  (setq git-gutter:update-interval 0.02)

  (require 'git-gutter-fringe)
  (add-hook 'emacs-startup-hook #'global-git-gutter-mode)

  (define-fringe-bitmap 'git-gutter-fr:added [#b11100000] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [#b11100000] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted
    [#b10000000
     #b11000000
     #b11100000
     #b11110000] nil nil 'bottom)

  (general-def
     :keymaps 'kr-<b-menu-map
     :predicate 'global-git-gutter-mode
     "g" 'git-gutter:previous-hunk)
  (general-def
   :keymaps 'kr->b-menu-map
   :predicate 'global-git-gutter-mode
   "g" 'git-gutter:next-hunk)

  (with-eval-after-load 'git-gutter
    (blackout 'git-gutter-mode))
#+end_src

*** git-timemachine
#+begin_src emacs-lisp
  (straight-use-package 'git-timemachine)
  (setq git-timemachine-show-minibuffer-details t)
  (general-def 'git-timemachine-mode-map
    "C-k" 'git-timemachine-show-previous-revision
    "C-j" 'git-timemachine-show-next-revision
    "q" 'git-timemachine-quit)
#+end_src

*** hydra-smerge
#+begin_src emacs-lisp
  (straight-use-package 'smerge-mode)
  (add-hook 'magit-diff-visit-file #'(lambda ()
                                       (when smerge-mode
                                         (smerge-hydra/body))))
  (defhydra smerge-hydra (:hint nil
                                  :pre (smerge-mode 1)
                                  ;; Disable `smerge-mode' when quitting hydra if
                                  ;; no merge conflicts remain.
                                  :post (smerge-auto-leave))
      "
                                                      ╭────────┐
    Movement   Keep           Diff              Other │ smerge │
    ╭─────────────────────────────────────────────────┴────────╯
       ^_g_^       [_b_] base       [_<_] upper/base    [_C_] Combine
       ^_C-k_^     [_u_] upper      [_=_] upper/lower   [_r_] resolve
       ^_k_ ↑^     [_l_] lower      [_>_] base/lower    [_R_] remove
       ^_j_ ↓^     [_a_] all        [_H_] hightlight
       ^_C-j_^     [_RET_] current  [_E_] ediff             ╭──────────
       ^_G_^                                            │ [_q_] quit"
      ("g" (progn (goto-char (point-min)) (smerge-next)))
      ("G" (progn (goto-char (point-max)) (smerge-prev)))
      ("C-j" smerge-next)
      ("C-k" smerge-prev)
      ("j" next-line)
      ("k" previous-line)
      ("b" smerge-keep-base)
      ("u" smerge-keep-upper)
      ("l" smerge-keep-lower)
      ("a" smerge-keep-all)
      ("RET" smerge-keep-current)
      ("\C-m" smerge-keep-current)
      ("<" smerge-diff-base-upper)
      ("=" smerge-diff-upper-lower)
      (">" smerge-diff-base-lower)
      ("H" smerge-refine)
      ("E" smerge-ediff)
      ("C" smerge-combine-with-next)
      ("r" smerge-resolve)
      ("R" smerge-kill-current)
      ("q" nil :color blue))
#+end_src

** COMMENT eshell
#+begin_src emacs-lisp
  (defun kr-meow-eshell-key-setup ()
    (general-def eshell-mode-map
      "C-j" 'eshell-next-input
      "C-k" 'eshell-previous-input
      "C-n" 'eshell-next-prompt
      "C-p" 'eshell-previous-prompt))
  (add-hook 'eshell-first-time-mode-hook #'kr-meow-eshell-key-setup)
#+end_src

** Flycheck
#+begin_src emacs-lisp
  ;;   (general-def kr-<b-menu-map
  ;;     "e" 'flymake-goto-prev-error)
  ;;   (general-def kr->b-menu-map
  ;;     "e" 'flymake-goto-next-error))

  (straight-use-package 'flycheck)
#+end_src

** Tree-sitter
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'tree-sitter)
  (general-add-hook '(c-mode-hook
                      js-mode-hook
                      python-mode-hook
                      css-mode-hook
                      go-mode-hook)
                    #'tree-sitter-hl-mode)
  (with-eval-after-load 'tree-sitter
    (blackout 'tree-sitter-mode))

  (straight-use-package 'tree-sitter-langs)
#+END_SRC

** Project
#+begin_src emacs-lisp
  (straight-use-package 'project)
#+end_src

** Parentheses

*** Smartparen
Smart paren I'm using to pair characters like quotes.
#+begin_src emacs-lisp
  (straight-use-package 'smartparens)
  (require 'smartparens-config)
  (defun indent-between-pair (&rest _ignored)
    (newline)
    (indent-according-to-mode)
    (forward-line -1)
    (indent-according-to-mode))
  (sp-local-pair 'prog-mode "{" nil :post-handlers '((indent-between-pair "RET")))
  (sp-local-pair 'prog-mode "[" nil :post-handlers '((indent-between-pair "RET")))
  (sp-local-pair 'prog-mode "(" nil :post-handlers '((indent-between-pair "RET")))
  (smartparens-global-mode 1)
  (show-smartparens-global-mode 1) ; alternative to show-paren-mode
  (blackout 'smartparens-mode)
#+end_src

*** Parinfer
Parinfer is there for lisp editing.
#+begin_src emacs-lisp
  (straight-use-package 'parinfer-rust-mode)
  (setq parinfer-rust-library-directory
        (expand-file-name "./var/parinfer-rust/" user-emacs-directory))
  (with-eval-after-load 'parinfer-rust-mode
    (add-to-list 'parinfer-rust-treat-command-as '(meow-open-above . "indent"))
    (add-to-list 'parinfer-rust-treat-command-as '(meow-open-below . "indent"))
    (add-to-list 'parinfer-rust-treat-command-as '(meow-yank . "indent")))

  (general-add-hook '(emacs-lisp-mode-hook lisp-mode-hook) #'parinfer-rust-mode)
#+end_src

** Formating

Formating code buffers on save.

Maybe better alternative [[https://github.com/purcell/emacs-reformatter][reformatter]]

#+begin_src emacs-lisp
  (straight-use-package 'apheleia)
  (add-hook 'js-mode-hook 'apheleia-mode)
#+end_src

** Flutter

*** Dart
#+begin_src emacs-lisp
  (defun kr-set-comile-command ()
    (setq-local
     compile-command
     (concat "dart "
             (when buffer-file-name
               buffer-file-name))))

  (straight-use-package 'dart-mode)
  (setq lsp-dart-sdk-dir "~/.flutter/bin/cache/dart-sdk")

  (add-hook 'dart-mode-hook #'kr-set-comile-command)
  (add-hook 'dart-mode-hook #'delete-selection-mode)

#+end_src

*** lsp-dart
#+begin_src emacs-lisp

  (straight-use-package 'lsp-dart)
  (setq lsp-signature-auto-activate nil)
  (add-hook 'dart-mode-hook 'lsp-deferred)

#+end_src

*** Hover
#+begin_src emacs-lisp
  (straight-use-package 'hover)
#+end_src

** web

*** web-mode

#+begin_src emacs-lisp
  (straight-use-package 'web-mode)
  (setq web-mode-auto-close-style 1)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-markup-indent-offset 2)
  (add-hook 'web-mode-hook #'visual-line-mode)
  (add-to-list 'auto-mode-alist '("\\.php?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+end_src

*** emmet-mode
#+begin_src emacs-lisp
  (straight-use-package 'emmet-mode)
  (setq emmet-move-cursor-after-expanding t)
  (setq emmet-move-cursor-between-quotes t)
  (general-def 'emmet-mode-keymap
    "M-p" 'emmet-prev-edit-point
    "M-n" 'emmet-next-edit-point)
  (add-hook 'web-mode-hook 'emmet-mode)
#+end_src

*** lsp-tailwindcss
#+begin_src emacs-lisp
  (straight-use-package 'lsp-tailwindcss)
  (setq lsp-tailwindcss-major-modes '(rjsx-mode web-mode html-mode typescript-mode))
  (setq lsp-tailwindcss-add-on-mode t)
  (setq lsp-tailwindcss-emmet-completions t)
  (add-hook 'before-save-hook 'lsp-tailwindcss-rustywind-before-save)
#+end_src

** Languages

*** Python
[[*LSP][lsp-hook]]
#+begin_src emacs-lisp
  (straight-use-package 'lsp-pyright)
#+end_src

*** Common Lisp

Seting ~sbcl~ to be default interpreter for lisp.
#+begin_src emacs-lisp
  (setq inferior-lisp-program "sbcl")
#+end_src

Sly the better SLIME.
#+begin_src emacs-lisp
  (straight-use-package 'sly)
  (general-def 'sly-mode-map
   "C-z h" 'sly-describe-symbol)
  (setq sly-contribs '(sly-fancy sly-mrepl))
#+end_src

*** JavaScript
Rest of configuration:
[[*LSP][lsp-hook]], [[*Tree-sitter][tree-stter-hook]], [[*Formating][apheleia-hook]]

#+begin_src emacs-lisp
  (setq js-indent-level 2)
#+end_src

*** JSON
[[*LSP][lsp-hook]]
#+begin_src emacs-lisp
  (straight-use-package 'json-mode)
#+end_src

*** rust
#+begin_src emacs-lisp
  (straight-use-package 'rust-mode)
  (straight-use-package 'cargo)
  (add-hook 'rust-mode-hook 'cargo-minor-mode)
#+end_src

*** Java
[[*LSP][lsp-hook]]
#+begin_src emacs-lisp
  (straight-use-package 'lsp-java)

  (defun kr-set-comile-command ()
    (setq-local
     compile-command
     (concat "java "
             (when buffer-file-name
               buffer-file-name))))

  (general-add-hook 'java-mode-hook '(lsp-deferred
                                      tree-sitter-hl-mode
                                      kr-set-comile-command))
#+end_src

** GTK
#+begin_src emacs-lisp
  (defun gtk-run ()
    "To compile and run gtk file."
    (interactive)
    (compile (concat "gcc $( pkg-config --cflags gtk4 ) -o "
                     (file-name-sans-extension buffer-file-name)
                     " "
                     buffer-file-name
                     " $( pkg-config --libs gtk4 )"))
    (async-shell-command (file-name-sans-extension buffer-file-name) nil nil))
#+end_src

** devdocs
#+begin_src emacs-lisp
  (straight-use-package 'devdocs)
  (add-hook 'devdocs-mode-hook #'olivetti-mode)
  (add-hook 'dart-mode-hook
              #'(lambda () (setq-local devdocs-current-docs '("dart~2"))))
#+end_src

** quickrun
#+begin_src emacs-lisp
  (straight-use-package 'quickrun)
  (defun kr-quickrun (func)
    (let ((win (get-mru-window)))
      (save-buffer)
      (funcall func)
      (select-window win)))

  (advice-add 'quickrun :around #'kr-quickrun)
#+end_src

* COMMENT Notes from old config
** Podsetnik za Info
*** Korisne komande i promenive koje treba znati

+ ~(list-command-history)~ - izlistava istoriju komandi. Komande su izlistane
  detaljno tj. sa svim argumentima itd.
+ =C-x <ESC> <ESC>= ~(repeat-complex-command)~ - daje mogućnost da ponoviš poslednju
  komandu sa promenjenim ili istim argumentima.
+ ~(apropos-user-option)~ - Search for user-customizable variables.  With a prefix
  argument, search for non-customizable variables too.
+ ~(apropos-variable)~ - Search for variables.  With a prefix argument, search for
  customizable variables only.
+ ~show-trailing-whitespace~ - promenjiva, ono sto ime kaže

*** Preskoceno u Emacs Info manual-u
- 11. 12. 13. 17. 22. sekcije Emacs info manual-a su preskočene
- 28.1 tj. VC je letimično pročitan zato sto
  koristim magit ali možda ima nesto pametno da se pročita.
- 28.4.2 i 28.4.3 TAGS preskočen
- 28.6 Emerge preskočen
- 31. 32. 33. 34. preskočeni
- 37. Document viewing preskočen
- 38. do 47. preskočeno
- 49.3.10. i 49.3.11. preskočeno

*** Korisne Info strane da se opet procitaju
16.4 O spellcheck-u
26.2.3 imunu
26.2.4 which-funciton-mode
49.3.4 minibuffer keymap kad se bude customizovao minibufer

*** Kako lakše raditi sa camelCase i snake_case
Postavi global sub word
(global-subword-mode 1)
Sad se =w= komanda kao i sve ostale ponašaju drugačije tj prepoznaju reči u camelcase i razlikuju ih.

vidiSadKakoSePonasaNaOvomPrimeru
vidi_sad_kako_se_ponasa_na_ovom_primeru

onda sa =vaw= ili =viw= opkoliš reč unutar camelcase-a a sa =vao= ili =vio= opkolis ceo simbol, celu promenjivu

- vidi /superword-mode/ Info emacs 26.11

** Notes
*** Korisni paketi koje treba pogledati
- aweshell
- sudo-edit
- quickrun
- crux
- format-all
- instant-rename-tag
- epaint

** Interesting packages
Remainder for some cool packages:
- wgrep

* mewo proba

** Meow

#+begin_src emacs-lisp
  (defun meow-setup ()
    "My meow setup thats similar to evil/vim"
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("M-j" . scroll-up-line)
     '("M-k" . scroll-down-line)
     '("`" . meow-last-buffer)
     '("<escape>" . keyboard-quit))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("`" . "H-`")
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("?" . meow-cheatsheet)
     '("/" . meow-keypad-describe-key))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '("`" . meow-last-buffer)
     '("<escape>" . keyboard-quit)
     ;; thing
     '("." . meow-inner-of-thing)
     '("," . meow-bounds-of-thing)
     '("<" . meow-beginning-of-thing)
     '(">" . meow-end-of-thing)

     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("y" . meow-save)
     '("Y" . kr-meow-save-line)

     '("p" . meow-yank)
     '("i" . meow-insert)
     '("a" . meow-append)

     '("j" . meow-next)
     '("M-j" . scroll-up-line)
     '("k" . meow-prev)
     '("M-k" . scroll-down-line)
     '("h" . meow-left)
     '("l" . meow-right)

     '("J" . meow-next-expand)
     '("K" . meow-prev-expand)
     '("H" . meow-left-expand)
     '("L" . meow-right-expand)
     '("c" . meow-change)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("n" . meow-search)
     '("/" . meow-visit)

     '("D" . meow-kill)
     '("d" . meow-kill-whole-line)
     '("x" . meow-backward-delete)
     '("X" . meow-delete)

     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '(";" . meow-reverse)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("v" . meow-line)
     '("f" . meow-find)
     '("t" . meow-till)
     '("G" . meow-grab)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("m" . meow-join)

     '("@" . meow-goto-line)
     '("P" . meow-pop-selection)
     '("A" . kr-meow-append-to-line)
     '("I" . kr-meow-insert-to-line)
     '("o" . meow-open-below)
     '("O" . meow-open-above)
     '("s" . meow-block)
     '("S" . meow-block-expand)
     '("q" . quit-window)
     '("C-r" . undo-tree-redo))

    ;; unrelated to editing
    (meow-leader-define-key
     '("v" . magit-status)
     '("i" . consult-imenu)
     '("V" . magit-status-here)
     (cons "p" project-prefix-map)
     (cons "f" kr-file-map)
     (cons "w" kr-window-map)
     (cons "b" kr-buffer-map)
     (cons "t" kr-toggle-map))
    (meow-normal-define-key
     '("{" . backward-paragraph)
     '("}" . forward-paragraph)
     (cons "g" kr-gmenu-map)
     (cons "[" kr-<b-menu-map)
     (cons "]" kr->b-menu-map))

    ;; help
    (meow-normal-define-key
     '("M-h" . "C-z h"))
    (meow-motion-overwrite-define-key
     '("M-h" . "C-z h")))

  (straight-use-package 'meow)
  (require 'meow)
  (general-def meow-keymap
    "C-h k" 'helpful-key)
  (setq meow-use-clipboard t)
  (add-to-list 'meow-mode-state-list '(helpful-mode . normal))
  (add-to-list 'meow-mode-state-list '(fundamental-mode . normal))
  (add-to-list 'meow-mode-state-list '(eshell-mode . normal))
  (add-to-list 'meow-mode-state-list '(sly-mrepl-mode . normal))
  (meow-setup)
  (meow-global-mode 1)
#+end_src

** Things config
#+begin_src emacs-lisp
  (meow-thing-register 'quote '(regexp "['\"]" "['\"]") '(regexp "['\"]" "['\"]"))
  (meow-thing-register 'htag '(regexp ">" "<") '(regexp ">" "<"))
  (meow-thing-register 'angle '(regexp "<" ">") '(regexp "<" ">"))
  (setq meow-char-thing-table '((?r . round)
                                (?\( . round)
                                (?\) . round)
                                (?\[ . square)
                                (?\{ . curly)
                                (?s . string)
                                (?\' . string)
                                (?\" . string)
                                (?W . symbol)
                                ;; (?a . window)
                                (?b . buffer)
                                (?p . paragraph)
                                (?l . line)
                                (?d . defun)
                                (?. . sentence)))
  (add-to-list 'meow-char-thing-table '(?\" . quote))
  (add-to-list 'meow-char-thing-table '(?t . htag))
  (add-to-list 'meow-char-thing-table '(?< . angle))
  (add-to-list 'meow-char-thing-table '(?> . angle))
#+end_src

** config for extending meow

Funciton and advices for making meow behave like I like it.

#+begin_src emacs-lisp
   ;;;;;;;;;;;;;;;
  (defun kr-meow-maybe-digit (fun n)
    "One more advice so that I can get digit arguments if there is no
   selection active and expand selestion if the selection is active."
    (if mark-active
        (funcall fun n)
      (call-interactively #'digit-argument)))
  (advice-add 'meow-expand :around #'kr-meow-maybe-digit)
   ;;;;;;;;;;;;;;;

  (defun kr-meow-save-line ()
    (interactive)
    (meow-line 1)
    (call-interactively #'meow-save))

  (defun kr-meow-reverse (fun)
    "Attemt to reverse command when there is no selection."
    (if mark-active
        (funcall fun)
      (negative-argument 1)))
  (advice-add 'meow-reverse :around #'kr-meow-reverse)

  (defun kr-meow-kill-whole-line (fun arg)
    "Delete line if there is no selection but delete selection if there
  is active selection."
    (if mark-active
        (meow-kill)
      (funcall fun arg)))
  (advice-add 'meow-kill-whole-line :around 'kr-meow-kill-whole-line)

  (defun kr-meow-copy-line-or-selection (fun arg)
    "Copy region if active. Copy line if no region is active."
    (if mark-active
        (funcall fun arg)
      (kr-meow-save-line)))
  (advice-add 'meow-save :around #'kr-meow-copy-line-or-selection)


  (defun kr-meow-append-mark ()
    "Move to end of selection and switch to insert state.
  Keep mark active."
    (interactive)
    (call-interactively #'meow-append)
    (activate-mark))
  (defun kr-meow-insert-mark ()
    "Move to beginign of selection and switch to insert state.
  Keep mark active."
    (interactive)
    (call-interactively #'meow-insert)
    (activate-mark))
  (meow-normal-define-key
   '("(" . kr-meow-insert-mark)
   '(")" . kr-meow-append-mark))


  (defun kr-meow-append-to-line ()
    (interactive)
    (end-of-line)
    (call-interactively #'meow-append))
  (defun kr-meow-insert-to-line ()
    (interactive)
    (beginning-of-line-text)
    (call-interactively #'meow-insert))
#+end_src

** Emacs switch bindings
Here I change emacs build in keybindings for better meow ergonomics.
For example because I use ~dired~ that is bound to =C-x d= more often then ~list-direcory~ that is bound to =C-x C-d= so I will swap those two commands so I can type =SPC x d= to acces dired faster with ~meow-keypad~.
#+begin_src emacs-lisp
  (general-def
    ;; C-x k
    "C-x k" kmacro-keymap
    "C-x K" 'kill-buffer
    "C-x C-k" 'kill-current-buffer
    ;; C-x b
    "C-x b" 'list-buffers
    "C-x C-b" 'switch-to-buffer
    ;; C-x 0
    "C-x 0" 'text-scale-adjust
    "C-x C-0" 'delete-window
    ;; C-x d
    "C-x d" 'list-directory
    "C-x C-d" 'dired
    ;; C-x o
    "C-x o" 'delete-blank-lines
    "C-x C-o" 'other-window
    ;; C-x p
    "C-x p" 'mark-page
    "C-x C-p" project-prefix-map)

  ;; some convinience bindings
  (general-def
    "C-x W" 'window-swap-states)
#+end_src

** COMMENT define-state
Template for other selfdefined meow states:
#+begin_src emacs-lisp
  (defvar meow-paren-keymap (make-keymap))
  (suppress-keymap meow-paren-keymap t)

  (meow-define-state paren
    "paren state"
    :lighter " [P]"
    :keymap meow-paren-keymap)

  (meow-normal-define-key
   '("Z" . meow-paren-mode))

  (meow-define-keys 'paren
    (cons "SPC" meow-leader-keymap)
    '("<escape>" . meow-normal-mode)
    '("l" . sp-forward-sexp)
    '("h" . sp-backward-sexp)
    '("j" . sp-down-sexp)
    '("k" . sp-up-sexp)
    '("w s" . sp-wrap-square)
    '("w r" . sp-wrap-round)
    '("w c" . sp-wrap-curly)
    '("W" . sp-unwrap-sexp)
    '("n" . sp-forward-slurp-sexp)
    '("b" . sp-forward-barf-sexp)
    '("v" . sp-backward-barf-sexp)
    '("c" . sp-backward-slurp-sexp)
    '("s" . sp-splice-sexp-killing-forward)
    '("S" . sp-splice-sexp-killing-backward)
    '("e" . sp-end-of-sexp)
    '("a" . sp-beginning-of-sexp)
    '("t" . sp-transpose-hybrid-sexp)
    '("u" . meow-undo))

  (setq meow-cursor-type-paren 'hollow)
#+end_src

** COMMENT meow palyground

#+begin_src emacs-lisp :tangle no
  (setq mark-ring nil)
  (car mark-ring)
  (goto-char (car mark-ring))
  (meow-normal-define-key
   '("%" . evilmi-jump-items))

  (meow-normal-define-key
   '("[t" .))
#+end_src

* COMMENT read-only-buffer keybinding

#+begin_src emacs-lisp
  (defun kr-read-only-binidngs ()
    (when buffer-read-only
      (make-local-variable 'meow-motion-state-keymap)
      (general-def 'meow-motion-state-keymap
        "r" 'kr-test)))

  (add-hook 'special-mode-hook 'kr-read-only-binidngs)
  (add-hook 'Info-mode 'kr-read-only-binidngs)
#+end_src
