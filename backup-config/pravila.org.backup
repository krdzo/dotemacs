#+title: DotEmacs
#+author: Krdzo
#+startup: fold

* Bootstrap

** Hooks
Here are all the hooks that can't go in a specific use-package statment
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'toggle-truncate-lines)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

* Themes and UI

** Font

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font  "Inconsolata Nerd Font 13")
#+end_src

** Frame

Enable fullscreen.
#+begin_src emacs-lisp
  (when window-system
    (add-to-list 'initial-frame-alist '(fullscreen . maximized)))
#+end_src

** Themes

#+begin_src emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :defer t)

  ;; list of ok themes:
  ;; doom-dark+
  ;; doom-hena
  ;; doom-snazy
  ;; doom-dracula
  ;; doom-Iosvkem
  ;; doom-old-hope
  ;; doom-palenight
  ;; doom-city-lights
  ;; dom-ocean-next
  ;; doom-monkai-clasic
  ;; doom-monkai-spectrum

  (use-package doom-themes
    :config
    (load-theme 'doom-oceanic-next t))
#+end_src

** Modeline

*** Smart mode line
#+begin_src emacs-lisp
  (use-package smart-mode-line
    :hook (emacs-startup . sml/setup)
    :config
    (add-to-list 'sml/replacer-regexp-list '("^~/\\.config/emacs/" ":ED:"))
    (setq sml/no-confirm-load-theme t)
    (setq sml/theme 'respectful))
#+end_src

*** Diminish

This package alowes me to change what modes are listed in the modeline

#+begin_src emacs-lisp
  (use-package diminish
    :hook (emacs-startup . my/diminish)
    :config
    (defun my/diminish ()
      (diminish 'gcmh-mode)
      (diminish 'anzu-mode)
      (diminish 'evil-goggles-mode)
      (diminish 'eldoc-mode)
      (diminish 'subword-mode)
      (diminish 'evil-org-mode)
      (diminish 'which-key-mode)
      (diminish 'undo-tree-mode)))
#+end_src
    
* Modes

Here I put modes that I can't come up with a category for or are to important
to put them in the features section.

** General
This is set before everything because it needs to define =:general= keyword for use-package.

#+begin_src emacs-lisp
  (use-package general
    :ensure t)
#+end_src

** Evil mode

#+begin_src emacs-lisp
  (use-package evil
    :defer t
    :init (setq evil-want-C-u-scroll t
                evil-undo-system 'undo-tree
                evil-symbol-word-search t
                evil-want-keybinding nil
                evil-want-Y-yank-to-eol t)
    ;; (general-add-hook 'emacs-startup-hook #'evil-mode nil nil t)


    :config
    (evil-mode)




    ;; https://github.com/noctuid/evil-guide#whats-the-equivalent-of-nnoremap-n-nzz
    (advice-add 'evil-search-next :after #'evil-scroll-line-to-center)
    (advice-add 'evil-search-previous :after #'evil-scroll-line-to-center)
    (setq evil-motion-state-cursor "#bb1111"
          evil-normal-state-cursor "#eeeeee"
          evil-emacs-state-cursor "#ee6622"
          evil-insert-state-cursor '(bar "#ff1547"))
    (setq evil-search-module 'isearch)
    ;; :q should kill the current buffer rather than quitting emacs entirely
    (evil-ex-define-cmd "q" 'kill-this-buffer)
    (evil-ex-define-cmd "wq" 'save-and-kill-this-buffer)
    ;; Need to type out :quit to close emacs
    (evil-ex-define-cmd "quit" 'kill-buffer-and-window)

    :general
    ('normal 
     "SPC" nil
     "gb" 'pop-tag-mark
     "gp" 'pop-tag-mark
     "go" 'browse-url-at-point)
    ('emacs 
     "<escape>" 'evil-normal-state)
    ('normal 'messages-buffer-mode-map
             "q" 'quit-window))
  ;; https://github.com/noctuid/evil-guide#binding-keys-to-keys-keyboard-macros
  ;; (general-def 'normal 
  ;;   ;; select the previously pasted text
  ;; (general-def 'emacs 
  ;;   "<escape>" 'evil-normal-state)
#+end_src

** Evil's friends
   
Evil and all asociated packages are configured in this section.

*** evil-collection

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    ;; :disabled
    :init
    (setq evil-collection-company-use-tng nil)
    :config
    (evil-collection-init '(comint
                            compile
                            company
                            compile
                            ibuffer
                            dired
                            dired-sidebar
                            geiser
                            helpful
                            (occur replace)
                            eshell
                            slime
                            help 
                            info
                            xref
                            magit
                            (term term ansi-term multi-term)
                            (package-menu package))))
#+end_src

*** evil-anzu
Shows how many matches is in a search.

#+begin_src emacs-lisp
  (use-package evil-anzu
    :after evil
    :config
    (global-anzu-mode))
#+end_src

*** evil-commentary

#+begin_src emacs-lisp
  (use-package evil-commentary
    :after (evil)
    :diminish
    :general
    ('normal
     "gy" 'evil-commentary-yank
     "gc" 'evil-commentary))
#+end_src

*** evil-matchit

#+begin_src emacs-lisp
  (use-package evil-matchit
    :hook (prog-mode . evil-matchit-mode))
#+end_src

*** evil-multiedit
#+begin_src emacs-lisp
  (use-package evil-multiedit
    :after evil
    :config
    (evil-multiedit-default-keybinds))
#+end_src

*** evil-lion 
#+begin_src emacs-lisp
  (use-package evil-lion
    :general
    ('(normal visual)
     "gl" 'evil-lion-left
     "gL" 'evil-lion-right))
#+end_src

*** evil-textobj-line

Select a line with =vil= and =val= keys.

#+begin_src emacs-lisp
  (use-package evil-textobj-line
    :after evil)

#+end_src

*** evil-goggles
#+begin_src emacs-lisp
  (use-package evil-goggles
    :after evil
    :config
    (setq evil-goggles-blocking-duration 0.100)
    (evil-goggles-mode))
#+end_src

*** evil-suround
#+begin_src emacs-lisp
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
#+end_src

*** evil-snipe and evil-quickscope

**** evil-snipe

#+begin_src emacs-lisp
  (use-package evil-snipe
    :after evil
    :diminish evil-snipe-local-mode
    :config
    (setq evil-snipe-repeat-scope 'visible)
    (evil-snipe-mode 1)
    (evil-snipe-override-mode 1)
    ;; (evil-snipe-override-mode 1)
    (push 'dired-mode evil-snipe-disabled-modes))
#+end_src

**** evil-quickscope 

#+begin_src emacs-lisp
  (use-package evil-quickscope
    :disabled
    :after evil
    :config
    ;; to make evil-snipe work with evil-quickscope
    (defalias 'evil-find-char 'evil-snipe-f)
    (defalias 'evil-find-char-backward 'evil-snipe-F)
    (defalias 'evil-find-char-to 'evil-snipe-t)
    (defalias 'evil-find-char-to-backward 'evil-snipe-T)
    (global-evil-quickscope-mode 1))

#+end_src

*** evil-exchange
#+begin_src emacs-lisp
  (use-package evil-exchange
    :after evil
    :config (evil-exchange-install))
#+end_src

*** evil-numbers
#+begin_src emacs-lisp
  (use-package evil-numbers
    :general
    ('visual 
             "g +" 'evil-numbers/inc-at-pt
             "g =" 'evil-numbers/inc-at-pt
             "g -" 'evil-numbers/dec-at-pt)
    ('normal 
             "g +" 'evil-numbers/inc-at-pt
             "g =" 'evil-numbers/inc-at-pt
             "g -" 'evil-numbers/dec-at-pt))

#+end_src

*** undo-tree
#+begin_src emacs-lisp
    (use-package undo-tree
      :after (evil)
      :config (global-undo-tree-mode 1))
#+end_src



*** /Disabled packages/
**** evil-visualstar
The * and # operators don't work as they should with this package.
#+begin_src emacs-lisp
  ;; (use-package evil-visualstar
  ;;   :disabled t
  ;;   :after (evil))
#+end_src

** Ediff

#+begin_src emacs-lisp
  (use-package ediff
    :defer t
    :straight nil
    :config
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src

** Eshell

#+begin_src emacs-lisp
  (use-package eshell
    :straight nil
    :defer t
    :config
    (defun kr-comp-eshell ()
      (setq-local company-backends '(company-capf)))
    (add-hook 'eshell-mode-hook #'kr-comp-eshell)
    (add-hook 'eshell-mode-hook (lambda ()
                                  (general-def 'normal 'local
                                    "C-n" 'eshell-next-input
                                    "C-p" 'eshell-previous-input))))
#+end_src

** Consult and Embark
*** Consult
#+begin_src emacs-lisp
  (use-package consult
    :config
    (setq consult-preview-key nil)
    :general
    ("C-h a" 'consult-apropos)
    ('(normal motion) 
     "gG" 'consult-goto-line)
    ('(normal motion) 
     :prefix "SPC"
     "/" 'consult-line
     "b b" 'consult-buffer))
  
  ;; (use-package consult-selectrum
  ;;   :after (consult))
#+end_src

*** Embark
#+begin_src emacs-lisp
  (use-package embark
    :config
    ;; which-key integration
    ;; https://github.com/oantolin/embark/wiki/Additional-Configuration#use-which-key-like-a-key-menu-prompt
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator)
    :general
    ('minibuffer-local-map
     "M-o" 'embark-act)
    ('(emacs normal) 'embark-occur-mode-map
     "a" 'embark-act
     "h" 'helpful-at-point))
#+end_src

*** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :after (:any consult selectrum)
    :config
    (marginalia-mode 1)
    (setq marginalia-annotators '(marginalia-annotators-heavy
                                  marginalia-annotators-light)))
#+end_src

** Selectrum and prescient

*** Selectrum

#+begin_src emacs-lisp
  (use-package selectrum
    :hook (after-init . selectrum-mode)
    :config
    (setq selectrum-count-style 'current/matches)
    :general
    ("M-c" 'selectrum-repeat)
    ('selectrum-minibuffer-map
     "C-r" 'evil-paste-from-register
     "C-n" 'next-history-element
     "C-p" 'previous-history-element
     "C-j" 'selectrum-next-candidate
     "C-k" 'selectrum-previous-candidate))
#+end_src

*** Prescient

Better sorting and filtering in selectrum and save usage statistics of modes
between Emacs sessions.

#+begin_src emacs-lisp
  (use-package prescient
    :after (:any selectrum company)
    :config
    (prescient-persist-mode 1))
  (use-package selectrum-prescient
    :after (prescient selectrum)
    :config
    (selectrum-prescient-mode 1))
#+end_src

* Features

** Auto-Completion
*** TODO probaj company-box

#+begin_src emacs-lisp
  (use-package company-box
    :disabled)
#+end_src

*** Company 

NOTE: there is ~company-indent-or-complete-common~ command that is maybe good to 
bind to
<tab>.


#+begin_src emacs-lisp
  ;; hack for mit-scheme because comapny lags typing
  (defun kr/company-for-comint ()
    (interactive)
    (set (make-local-variable 'company-idle-delay) 0.35))

  (defun kr/company-for-text ()
    (interactive)
    (set (make-local-variable 'company-idle-delay) 0.3)
    (set (make-local-variable 'company-minimum-prefix-length) 3))

  (defun kr/company-for-prog ()
    (interactive)
    (setq-local company-idle-delay 0.0)
    (setq-local company-minimum-prefix-length 1))

  (use-package company
    :hook
    (emacs-startup . global-company-mode)
    ;; :hook ((prog-mode . company-mode)
    ;;        (text-mode . company-mode))
    :config
    (add-hook 'org-mode-hook 'kr/company-for-text)
    ;; (add-hook 'scheme-mode-hook 'kr/company-for-mit)
    (add-hook 'comint-mode-hook 'kr/company-for-comint)
    (general-def company-active-map
      "<tab>" 'company-complete-common-or-cycle)


    (setq company-backends
          (delete 'company-oddmuse company-backends))
    (setq company-dabbrev-downcase nil)
    (setq completion-styles '(basic partial-completion flex))
    (setq company-idle-delay 0
          company-minimum-prefix-length 1
          company-selection-wrap-around t)
    (setq company-global-modes '(not help-mode
                                     helpful-mode
                                     gud-mode)))

  ;; here just to remember some variables
  ;; company-tooltip-align-annotations
  ;; company-auto-commit
  ;; company-search-filtering
  ;; company-dabbrev-other-buffers
  ;; company-abort-manual-when-too-short
  ;; company-prescient-sort-length-enable


  ;; korisne company funkcije
  ;; company-show-location
  ;; company-complete-commot-or-cycle
#+end_src

*** company prescient
#+begin_src emacs-lisp
  (use-package company-prescient
      :after (prescient company)
      :config
      (setq company-prescient-sort-length-enable nil)
      (company-prescient-mode 1))
#+end_src

** Calendar

#+begin_src emacs-lisp
  (setq calendar-date-style 'european)
  (setq calendar-week-start-day 1)
#+end_src

** Dired

NOTE - dired enhancement packages: dired-postframe, dired-git, dired-filter, dired-narow

*** dired 
#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    ;; :defer t
    :hook ((dired-mode . (lambda ()
                           (unless (file-remote-p default-directory)
                             (auto-revert-mode))))
           (dired-mode . toggle-truncate-lines))
    :config
    (setq dired-dwim-target t)
    (setq dired-isearch-filenames 'dwim)
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq dired-create-destination-dirs 'always)
    (setq dired-listing-switches "-valh --group-directories-first")
    ;; evil-collection setups its hooks after dired is first loaded
    ;; and overrides :general map so for now I must do this so that
    ;; I unbind SPC in dired-mode
    (add-hook 'dired-mode-hook
              #'(lambda ()
                  (general-unbind 'normal 'dired-mode-map
                    "SPC")
                  (general-def 'normal 'dired-mode-map
                    "gh" 'kr-go-home)))
    ;; (general-def 'normal dired-mode-map
    ;;   "SPC" nil)
    (defun kr-go-home ()
      "Function for opening home directory in dired"
      (interactive)
      (dired "~/"))

    :general
    ('normal 'dired-mode-map
             "C-M-j" 'dired-next-subdir
             "C-M-k" 'dired-prev-subdir
             "C-j" 'dired-next-marked-file
             "C-k" 'dired-prev-marked-file
             "DEL" 'dired-unmark-backward))
#+end_src

*** dired-x
#+begin_src emacs-lisp
  (use-package dired-x
    :straight nil
    :commands dired-jump
    :config
    ;; (setq dired-clean-confirm-killing-deleted-buffers nil)

    ;; dired-x will help to remove buffers that were associated with deleted
    ;; files/directories

    ;; to not get y-or-no question for killing buffers when deliting files go here for
    ;; inspiration on how to do it
    ;; https://stackoverflow.com/questions/11546639/dired-x-how-to-set-kill-buffer-of-too-to-yes-without-confirmation
    ;; https://emacs.stackexchange.com/questions/30676/how-to-always-kill-dired-buffer-when-deleting-a-folder
    ;; https://www.reddit.com/r/emacs/comments/91xnv9/noob_delete_buffer_automatically_after_removing/
    )
#+end_src

*** dired-sidebar
#+begin_src emacs-lisp
  (use-package dired-sidebar
    :commands (dired-sidebar-toggle-sidebar)
    :config
    (setq dired-sidebar-width 30)
    :general
    ('normal
     "SPC f d" 'dired-sidebar-toggle-sidebar))
#+end_src

*** all-the-icons-dired

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** dired-hacks

**** dired-k
#+begin_src emacs-lisp
  (use-package dired-k
    :disabled
    :hook
    ((dired-initial-position . dired-k)
     (dired-after-readin . dired-k-no-revert))
    :config
    (setq dired-k-style 'git)
    (setq dired-k-human-readable t)
    ;; so that dired-k plays nice with dired-subtree
    (advice-add 'dired-subtree-insert :after 'dired-k-no-revert))
#+end_src 
 
**** dired-subtree
#+begin_src emacs-lisp
  (use-package dired-subtree
    :after dired
    :config
    ;; so that dired icons work nicely with subtree
    (advice-add 'dired-subtree-toggle :after #'(lambda ()
                                                 (interactive)
                                                 (call-interactively #'revert-buffer))))
#+end_src

**** dired-reinbow 
#+begin_src emacs-lisp
  (use-package dired-rainbow
    :after dired
    :config
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log "#c17d11" ("log"))
    (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))
#+end_src

** Git - magit
   
*** Magit

#+begin_src emacs-lisp
  (use-package magit
    :config
    (set-face-background 'magit-diff-added-highlight
                         "#1b2b34")
    (set-face-background 'magit-diff-added
                         "#1b2b34")
    (set-face-background 'magit-diff-removed-highlight
                         "#1b2b34")
    (set-face-background 'magit-diff-removed
                         "#1b2b34")
    (set-face-background 'magit-diff-context-highlight
                         ;; "#14232D" default
                         "#1b2b34")
    (defun kr-magit-set ()
      (general-def 'magit-mode-map
        "SPC" 'nil)
      (general-def 'normal 'magit-mode-map
        "SPC" nil
        "[" nil
        "]" nil
        "SPC SPC" 'magit-diff-show-or-scroll-up
        "[w" 'evil-window-prev
        "]w" 'evil-window-next)
      (general-def 'magit-section-mode-map
        "C-<tab>" nil
        "<backtab>" 'magit-section-cycle))

    (add-hook 'magit-mode-hook 'kr-magit-set)
    :general
    ("C-x g" 'magit-status))
#+end_src

When transient-mode is active this helps to escape it like with "C-g"
#+begin_src emacs-lisp
  (general-def 'transient-map
    "<escape>" 'transient-quit-one)
#+end_src
   
*** Git-gutter

#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :init (add-hook 'emacs-startup-hook #'global-git-gutter-mode)
    (add-hook 'git-gutter-mode-on-hook #'(lambda ()
                                           (diminish 'git-gutter-mode)))
    :general
    ('normal
     "]g" 'git-gutter:next-hunk
     "[g" 'git-gutter:previous-hunk))
#+end_src

** Help 

*** help
#+begin_src emacs-lisp
  (general-unbind normal help-mode-map "SPC")
#+end_src

*** helpful

#+begin_src emacs-lisp
  (use-package helpful
    :general
    ('(normal insert emacs) 
      "C-h k" 'helpful-key
      "C-h o" 'helpful-symbol
      "C-h C" 'helpful-command
      "C-h f" 'helpful-callable
      "C-h v" 'helpful-variable)
    ('normal
     "K" 'helpful-at-point))
#+end_src

*** elisp-demos
#+begin_src emacs-lisp
  (use-package elisp-demos
    :after (helpful)
    :config
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src

** Occur
- occur-contex-resize
#+begin_src emacs-lisp
  (use-package occur-context-resize
    :hook (occur-mode . occur-context-resize-mode)
    :general
    ('normal 'occur-mode-map
             "-" 'occur-context-resize-smaller
             "=" 'occur-context-resize-larger
             "+" 'occur-context-resize-larger
             "0" 'occur-context-resize-default))
#+end_src

** Project

#+begin_src emacs-lisp
  (use-package project
    :general
    ('normal
      "SPC p" project-prefix-map))
#+end_src

** Natural language
*** Serbian
I making a custom input method for Serbian language because all the other methods that exist are stupid. 
[[https://satish.net.in/20160319/][Reference how to make custom input method]].

#+begin_src emacs-lisp
  (quail-define-package
   "serbian-latin" "Serbian" "SR" nil
   "Sensible Serbian keyboard layout."
    nil t nil nil nil nil nil nil nil nil t)
  
  (quail-define-rules
   ("x" ?š)
   ("X" ?Š)
   ("w" ?č)
   ("W" ?Č)
   ("q" ?ć)
   ("Q" ?Ć)
   ("y" ?ž)
   ("Y" ?Ž)
   ("dj" ?đ)
   ("Dj" ?Đ)
   ("DJ" ?Đ))
#+end_src
This input method changes all English keys with Serbian.

Set =serbian-latin= to default input method.
#+begin_src emacs-lisp
  (setq default-input-method "serbian-latin")
#+end_src

*** define-word

#+begin_src emacs-lisp
  (use-package define-word
    :commands (define-word define-word-at-point))
#+end_src

** Reload/open .emacs

Function for reloading configuration

#+begin_src emacs-lisp
  (defun my/config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "pravila.org" user-emacs-directory)))
#+end_src

Function for opening pravila.org

#+begin_src emacs-lisp
  (defun my/edit-config-org ()
    (interactive)
    (find-file (expand-file-name "pravila.org" user-emacs-directory )))
#+end_src

Functon for opening init.el

#+begin_src emacs-lisp
  (defun my/edit-config-init ()
    (interactive)
    (find-file (expand-file-name "init.el" user-emacs-directory)))
#+end_src

Keybindings for these functions

#+begin_src emacs-lisp
  (general-def '(motion normal) 
    :prefix "SPC f e"
    ;; "r" 'my/config-reload
    "d" 'my/edit-config-org
    "i" 'my/edit-config-init)
#+end_src

** Visual-fill-column
#+begin_src emacs-lisp
  (use-package visual-fill-column)
#+end_src

** Org

*** org

#+begin_src emacs-lisp
  (defun kr-org-hook ()
    (interactive)
    (general-def 'insert 'local
      "<tab>" 'org-cycle))
  
  (straight-use-package 'org)
  ;;(straight-use-package '(org-plus-contrib :includes org))
  (use-package org
    :defer t
    :straight nil
    :config
    (add-hook 'org-indent-mode-hook #'(lambda ()
                                        (diminish 'org-indent-mode)))
    (general-add-hook 'org-mode-hook #'kr-org-hook)
    (add-to-list 'org-structure-template-alist
                 '("el" . "src emacs-lisp"))
    (add-to-list 'org-modules 'org-tempo t)
  
    ;; https://orgmode.org/manual/Labels-and-captions-in-ODT-export.html
    (setq org-odt-category-map-alist
          '(("__Figure__" "Slika" "value" "Figure" org-odt--enumerable-image-p)))
  
    (setq org-startup-indented t
          org-image-actual-width 700
          org-M-RET-may-split-line nil
          org-ellipsis " ⮷"
          org-return-follows-link t
          org-src-window-setup 'current-window)
    (general-def 'normal 'org-mode-map
      "zj" 'evil-next-visual-line
      "zk" 'evil-previous-visual-line
             "C-j" 'org-next-visible-heading
             "C-k" 'org-previous-visible-heading)) 
  
  ;; (use-package ox-extra
  ;;   :straight nil
  ;;   :after org
  ;;   :config
  ;;   (ox-extras-activate '(latex-header-blocks ignore-headlines)))
  
  
  ;; (use-package toc-org
  ;;   :hook (org )
  ;;   :after org)
#+end_src
   
*** evil-org
#+begin_src emacs-lisp
  (use-package evil-org
    :diminish
    :after (evil org)
    :hook (org-mode . evil-org-mode)
    :config
    (setq evil-org-retain-visual-state-on-shift t)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme '(navigation
                                          return
                                          insert
                                          textobjects
                                          additional
                                          calendar))))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** Parentheses

Highlight parenthese-like delimiters in a rainbow fashion. It ease the reading when dealing with mismatched parentheses.
   
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((prog-mode comint-mode) . rainbow-delimiters-mode))
#+end_src
  
Smartparens for better paren handling, and everything that goes in pairs.
   
#+begin_src emacs-lisp
  ;; (use-package smartparens
  ;;   :ensure t
  ;;   :diminish
  ;;   :hook (prog-mode . smartparens-mode)
  ;;   :config
  ;;   (sp-local-pair '(emacs-lisp-mode lisp-interaction-mode inferior-emacs-lisp-mode) "'" "")
  ;;   (sp-local-pair '(emacs-lisp-mode lisp-interaction-mode inferior-emacs-lisp-mode) "`" ""))
#+end_src
#+begin_src emacs-lisp
  ;; just here for the time being
  ;; needs to be faktored
  (add-hook 'prog-mode-hook 'electric-pair-local-mode)
#+end_src
   
** Which-key
   
Which-key is used for easier keybindings discovery

#+begin_src emacs-lisp
  (use-package which-key
    :hook (after-init . which-key-mode)
    :config
    (setq which-key-idle-delay 0.5))
#+end_src

** EPKG
For listing packages
#+begin_src emacs-lisp
  (use-package epkg
    :init
    (defalias 'lp 'epkg-list-packages "Shortcut for list-packages")
    :general
    ("C-h p" 'epkg-describe-package))


#+end_src

** Window positioning

najbolje ja da pisem display-buffer pravila
za to mi je potrebno da istrazim ~display-buffer-alist~

*** Shackle

#+begin_src emacs-lisp
  (use-package shackle
    :disabled
    :init
    (setq shackle-rules
          '(("\\*.*eshell\\*" :regexp t :select t :popup t :align 'below :size 0.25)
            ("*Messages*" :select t :other t :align 'below :size 0.2)))
    (setq shackle-default-alignment 'below)
    :config
    (shackle-mode 1))
#+end_src

*** Popper

Poper is used to configure where a window will open.
Configuration is not finished



#+begin_src emacs-lisp
  (use-package popper
    :disabled
    :general
    ("C-`"    'popper-toggle-latest
     "C-1"    'popper-cycle
     "C-M-`"  'popper-toggle-type)
    :ini
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*.*eshell\\*$"
            compilation-mode))
    (setq popper-display-control nil)
    (popper-mode +1)
    :config
    (setq popper-group-function nil))

#+end_src

* Programming
** LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init (setq lsp-keymap-prefix "M-l")
    :commands (lsp lsp-defered)
    :hook
    (css-mode . lsp)
    (web-mode . lsp)
    (python-mode . lsp)
    (js-mode . lsp)
    :config
    (setq lsp-completion-enable nil)
    (defun kr-set-lsp-setings ()
      "All configuration that need to be run after LSP"
      (general-def 'normal 'local
        "K" 'lsp-describe-thing-at-point
        "gr" 'lsp-find-references)
      (general-def 'company-active-map
        "<backtab>" 'company-select-previous-or-abort)
      (setq-local company-backends
                  '(company-files company-capf company-yasnippet)))
    (general-add-hook 'lsp-mode-hook '(kr-set-lsp-setings
                                       lsp-completion-mode
                                       lsp-enable-which-key-integration))
    :general
    ('normal 'lsp-mode
             :definer 'minor-mode
             "SPC l" (general-simulate-key "M-l" :which-key "lsp")))
#+end_src

** Languages
*** Python

**** python

#+begin_src emacs-lisp
  (use-package python
    :straight nil
    :defer t
    :hook (python-mode . tree-sitter-hl-mode)
    :config)
    ; Use IPython when available or fall back to regular Python)


#+end_src

**** Pyright 
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp))))
#+end_src

**** Pipenv

#+begin_src emacs-lisp
  (use-package pipenv
    :hook (python-mode . pipenv-mode))

  ; Usefull code snipet when I get how to use it within a virtual env
  ; Use IPython when available or fall back to regular Python 
    ;; (cond
    ;;  ((executable-find "ipython")
    ;;   (progn
    ;;     (setq python-shell-buffer-name "IPython")
    ;;     (setq python-shell-interpreter "ipython")
    ;;     (setq python-shell-interpreter-args "-i --simple-prompt")))
    ;;  ((executable-find "python3")
    ;;   (setq python-shell-interpreter "python3"))
    ;;  ((executable-find "python2")
    ;;   (setq python-shell-interpreter "python2"))
    ;;  (t
    ;;   (setq python-shell-interpreter "python")))
#+end_src

*** Scheme (Geiser)
#+begin_src emacs-lisp
  (use-package geiser
    :defer t
    :init
    (setq geiser-active-implementations '(guile))
    :config
    (setq geiser-guile-binary "guile2.2")
    ;; (advice-add 'geiser-repl--maybe-send :after #'evil-normal-state)    ;; after <return> in REPL go to normal-state
    :general
    ('normal 'geiser-mode-map
             "gr" 'geiser-eval-definition)
    ('normal 'geiser-repl-mode-map
             "gz" 'switch-to-geiser)
    ('normal 'geiser-doc-mode-map
             "q" 'View-quit))
#+end_src

*** COMMENT JavaScript
Prazno za sad

*** JSON
#+begin_src emacs-lisp
  (use-package json-mode)
#+end_src

*** Lisp

**** Internal Lisp
#+begin_src emacs-lisp
  (use-package inf-lisp
    :straight nil
    :config
    (setq inferior-lisp-program "sbcl"))
#+end_src

**** SLIME
#+begin_src emacs-lisp
  ;;from Portacle
  (defun slime-repl-return-at-end ()
    (interactive)
    (if (<= (point-max) (point))
        (slime-repl-return)
        (slime-repl-newline-and-indent)))


  (use-package slime
    :defer t
    :config
    (use-package slime-company)
    (setq slime-company-completion 'fuzzy)
    (defun kr/slime-init ()
      (general-def 'normal 'slime-repl-mode-map
        "K" 'slime-describe-symbol)
      (general-def 'insert 'slime-repl-mode-map
        "<return>" 'slime-repl-return-at-end)
      (setq-local company-backends '(company-files company-slime)
                  scroll-margin 4))
    (add-hook 'slime-mode-hook #'kr/slime-init)
    (add-hook 'slime-repl-mode-hook #'kr/slime-init))
#+end_src

*** Web

**** web-mode

#+begin_src emacs-lisp
  (use-package web-mode
    :mode "\\.html?\\'"
    :config
    (setq web-mode-auto-close-style 1)
    (setq web-mode-markup-indent-offset 4))
#+end_src

**** emmet-mode
#+begin_src emacs-lisp
  (use-package emmet-mode
    :diminish
    :hook
    (web-mode . emmet-mode)
    (css-mode . emmet-mode)
    :config
    (setq emmet-move-cursor-after-expanding t)
    (setq emmet-move-cursor-between-quotes t)
    (defun kr-setup-for-emmet ()
      (general-def 'insert 'local
        "M-<return>" 'emmet-expand-yas)) ;; emmet works with old version of YAS so this is bugged
    (general-add-hook 'emmet-mode-hook 'kr-setup-for-emmet))
#+end_src

** Snipets (yassnipet)
#+begin_src emacs-lisp
  (use-package yasnippet
    :after company
    :diminish yas-minor-mode 
    :hook (lsp-mode . yas-minor-mode)
    :config

    (defun kr-company-tng-yasnippet-or-completion ()
      "KR da se zna kad se otvori dokumentacija da je custom funkcija"
      (interactive)
      (if yas-minor-mode
          (unless (yas-expand)
            (call-interactively #'company-complete-common-or-cycle))
        (call-interactively #'company-complete-common-or-cycle)))


    (add-hook 'yas-minor-mode-hook
              (lambda ()
                (interactive)
                (general-def 'company-active-map
                  "<tab>" 'kr-company-tng-yasnippet-or-completion))))

    ;; (defun kr-company-yasnippet-or-completion ()
    ;; "KR da se zna kad se otvori dokumentacija da je custom funkcija"
    ;;   (interactive)
    ;;   (unless (yas-expand)
    ;;     (call-interactively #'company-complete-common-or-cycle)))
    ;; (general-def 'company-active-map
    ;;   "<tab>" 'kr-company-yasnippet-or-completion))


  (use-package yasnippet-snippets
    :defer t
    :after yasnippet)
#+end_src

** Tree-sitter
#+begin_src emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs)
#+end_src

* Keybindings
** Change EMACS builtin keys
The keybindings here are unsorted but they have in comon that they
are emacs builtin features.

#+begin_src emacs-lisp
  (general-def 
    "C-x C-b" 'ibuffer
    "C-h P" 'finder-by-keyword
    "C-h l" 'find-library
    "C-a" 'universal-argument)
    ;; "C-l" 'universal-argument)
#+end_src
*** Izmisljene za mene 
#+begin_src emacs-lisp
  (defun kr/zatvori-drugi-window ()
    (interactive)
    (save-excursion
      (other-window 1)
      (call-interactively #'quit-window)))

  (general-def 'normal
    "SPC q" 'kr/zatvori-drugi-window)
#+end_src

** Buffers
Custom funcions used in this section for bindings
#+begin_src emacs-lisp
    (defun kr/edit-scratch ()
      (interactive)
      (switch-to-buffer "*scratch*"))

  (defun my/bury-other-buffer ()
    (interactive)
    (save-excursion
      (other-window 1)
      (bury-buffer)
      (other-window 1)))


#+end_src
   
#+begin_src emacs-lisp
  (general-def  '(motion normal) 
    :prefix "SPC b"
    "" '(:ignore t :which-key "buffer")
    "s" 'kr/edit-scratch
    "d" 'kill-current-buffer
    "o" 'my/bury-other-buffer)
#+end_src

** Company   

#+begin_src emacs-lisp
  ;; there is a bug when you have company completion and hit C-h
  ;; (company-show-doc-buffer). If the next comand is C-k then insert-state takes
  ;; that comand and runs evil-insert-digraph function insted of company-active-map
  ;; so we have to unbind C-k in insert state
  (general-unbind 'insert 
    "C-k")
  ;;;;;;;;;;;

  (defun kr-company-escape ()
    (interactive)
    (company-abort)
    (evil-force-normal-state))

  (general-def 'insert
    "C-j" 'company-select-next)
    ;; "<tab>" 'company-indent-or-complete-common)

  (general-def 'company-active-map
    ;; "<escape>" 'kr-company-escape
    ;; "<tab>" 'company-complete-common-or-cycle
    "<f1>" 'helpful-key)
#+end_src

** Files
#+begin_src emacs-lisp
  (general-def '(motion normal) 
    :prefix "SPC f"
    "" '(:ignore t :which-key "file")
    "f" 'find-file
    "ee" 'consult-file-externally
    "D" 'dired-jump
    "S" 'write-file
    "s" 'save-buffer)
#+end_src
   
** Minibuffer
#+begin_src emacs-lisp
(general-def 'minibuffer-local-map
  "<escape>" 'abort-recursive-edit
  "C-w" 'evil-window-map)
#+end_src

** Info mode
#+begin_src emacs-lisp
  (general-unbind normal Info-mode-map "SPC")
  (general-def normal Info-mode-map
    "<up>" '(lambda () (interactive) (evil-scroll-line-up 1) (evil-previous-line))
    "<down>" '(lambda () (interactive) (evil-scroll-line-down 1) (evil-next-line))
    "C-f" 'Info-scroll-up
    "C-b" 'Info-scroll-down
    "SPC SPC" 'Info-scroll-up
    "S-<backspace>" 'Info-scroll-up)
#+end_src

** Windows
#+begin_src emacs-lisp
  (general-def '(motion normal) 
    "]w" 'evil-window-next
    "[w" 'evil-window-prev)

  (general-def '(motion normal) 
    :prefix "SPC w"
    "" '(:ignore t :which-key "window")
    "b" 'consult-buffer-other-window
    "d" 'evil-window-delete
    "c" 'evil-window-delete
    "v" 'evil-window-vsplit
    "s" 'evil-window-split
    "o" 'delete-other-windows)
#+end_src

** Org
#+begin_src emacs-lisp
  (general-def 'normal 'org-mode-map
    "RET" 'org-return
    "gz" 'org-edit-special)
  ;; smeta sa tabon iza elipsa kod headinga
  ;; "j" 'evil-next-visual-line
  ;; "k" 'evil-previous-visual-line)
  (general-def 'insert 'org-mode-map
    "M-l" 'org-metaright
    "M-h" 'org-metaleft
    "M-j" 'org-metadown
    "M-j" 'org-metaup)

  ;; https://github.com/noctuid/general.el#wrapping-evil-define-minor-mode-key
  (general-def
    :definer 'minor-mode
    :states 'normal
    :keymaps 'org-src-mode
    "gZ" 'org-edit-src-abort
    "gz" 'org-edit-src-exit)
#+end_src

** comint
#+begin_src emacs-lisp
  ;; (general-def 'normal 'comint-mode-map
  ;;   "O" 'comint-goto-process-mark) 

  ;; (general-def 'insert 'comint-mode-map
  ;;   "C-n" 'comint-next-input
  ;;   "C-p" 'comint-previous-input)
#+end_src

** occur
#+begin_src emacs-lisp
  (general-def 'normal 'occur-mode-map
    "i" 'occur-edit-mode
    "o" 'occur-mode-display-occurrence
    "O" 'occur-mode-goto-occurrence-other-window
    "F" 'next-error-follow-minor-mode
    "gr" 'revert-buffer)
  (general-def 'normal 'occur-edit-mode-map
    "F" 'next-error-follow-minor-mode
    "go" 'occur-mode-display-occurrence
    "C-x C-k" 'occur-cease-edit)
#+end_src

** TODO Expand evil-collection 

For modes that evil-collection didn't setup.

*** TODO Adding uninmpaired keys

Treba da se napravi da ovo izvrsi
posto sad izgleda da evil-collection pregazi ovu definiciju
#+begin_src emacs-lisp
(general-def 'normal 'evil-collection-unimpaired-mode-map
    "]e" 'next-error
    "[e" 'previous-error)
#+end_src

*** Quit vairous modes

Quiting modes 

#+begin_src emacs-lisp

  ;; setup for quit modes
  (general-def 'normal 'special-mode-map
    "q" 'quit-window)

#+end_src

** compile 
#+begin_src emacs-lisp
  (general-def 'normal
    "SPC c c" 'compile
    "SPC c C" 'recompile)

#+end_src

* Podsetnik za Info
** Korisne komande i promenive koje treba znati

+ ~(list-command-history)~ - izlistava istoriju komandi. Komande su izlistane
  detaljno tj. sa svim argumentima itd.
+ =C-x <ESC> <ESC>= ~(repeat-complex-command)~ - daje mogućnost da ponoviš poslednju
  komandu sa promenjenim ili istim argumentima.
+ ~(apropos-user-option)~ - Search for user-customizable variables.  With a prefix 
  argument, search for non-customizable variables too.
+ ~(apropos-variable)~ - Search for variables.  With a prefix argument, search for
  customizable variables only.
+ ~show-trailing-whitespace~ - promenjiva, ono sto ime kaže

** Preskoceno u Emacs Info manual-u
- 11. 12. 13. 17. 22. sekcije Emacs info manual-a su preskočene
- 28.1 tj. VC je letimično pročitan zato sto
  koristim magit ali možda ima nesto pametno da se pročita.
- 28.4.2 i 28.4.3 TAGS preskočen
- 28.6 Emerge preskočen
- 31. 32. 33. 34. preskočeni
- 37. Document viewing preskočen
- 38. do 47. preskočeno
- 49.3.10. i 49.3.11. preskočeno
  
  
** Korisne Info strane da se opet procitaju
16.4 O spellcheck-u 
26.2.3 imunu
26.2.4 which-funciton-mode
49.3.4 minibuffer keymap kad se bude customizovao minibufer

** Kako lakše raditi sa camelCase i snake_case 
Postavi global sub word
(global-subword-mode 1)
Sad se =w= komanda kao i sve ostale ponašaju drugačije tj prepoznaju reči u camelcase i razlikuju ih.

vidiSadKakoSePonasaNaOvomPrimeru
vidi_sad_kako_se_ponasa_na_ovom_primeru

onda sa =vaw= ili =viw= opkoliš reč unutar camelcase-a a sa =vao= ili =vio= opkolis ceo simbol, celu promenjivu

- vidi /superword-mode/ Info emacs 26.11

** Org mode info
Strane koje vrede ponovo pročitati
- 2.2.3 strana
- 3.6 intresting org plot
  
* Notes
** Korisni paketi koje treba pogledati
- aweshell
- sudo-edit
- quickrun
- crux
- format-all
- instant-rename-tag
- epaint
** Opcije koje treba istraziti
- ~create-lockfiles~
* Generating pravila.el
Prepisao iz [[https://github.com/KaratasFurkan/.emacs.d#applying-changes]]

#+begin_src emacs-lisp
  (defun fk/tangle-config ()
    "Export code blocks from the literate config file
  asynchronously."
    (interactive)
    ;; prevent emacs from killing until tangle-process finished
    (add-to-list 'kill-emacs-query-functions
                 (lambda ()
                   (or (not (process-live-p (get-process "tangle-process")))
                       (y-or-n-p "\"fk/tangle-config\" is running; kill it? "))))
    ;; tangle config asynchronously
    (fk/async-process
     (format "emacs %s --batch --eval '(org-babel-tangle nil \"%s\")'" config-org config-el)
     "tangle-process"))
  
  (add-hook 'org-mode-hook
            (lambda ()
              (if (equal (buffer-file-name) config-org)
                  (fk/add-local-hook 'after-save-hook 'fk/tangle-config))))
  
  (defun fk/async-process (command &optional name filter)
    "Start an async process by running the COMMAND string with bash. Return the
  process object for it.
  
  NAME is name for the process. Default is \"async-process\".
  
  FILTER is function that runs after the process is finished, its args should be
  \"(process output)\". Default is just messages the output."
    (make-process
     :command `("bash" "-c" ,command)
     :name (if name name
             "async-process")
     :filter (if filter filter
               (lambda (process output) (message (s-trim output))))))
  
  ;; Examples:
  ;;
  ;; (fk/async-process "ls")
  ;;
  ;; (fk/async-process "ls" "my ls process"
  ;;                   (lambda (process output) (message "Output:\n\n%s" output)))
  ;;
  ;; (fk/async-process "unknown command")
  
  (defun kr-generate-config-file ()
     "If pravila.el is older than pravila.org than generate new pravila.el"
     (if (bufferp kr-org-conf-file)
       (with-current-buffer kr-org-conf-file
         (save-buffer)))
  
     (let ((el-older-p
            (time-less-p (nth 5 (file-attributes kr-el-conf-file))
                         (nth 5 (file-attributes kr-org-conf-file)))))
       (when el-older-p
         (require 'org) ;; if org is not loaded, load it 
         (org-babel-tangle-file kr-org-conf-file kr-el-conf-file))))
  
  (add-hook 'kill-emacs-hook #'kr-generate-config-file)
  
  
  ;; don't know how to do this at this moment will do in the future
  ;; (with-current-buffer (get-file-buffer kr-org-conf-file)
  ;;   (general-def 'normal 'local
  ;;     "SPC f s" #'kr-generate-config-file))
#+end_src


* COMMENT No export 
#+begin_src emacs-lisp 
  (defun what-face (pos)
    "What is the face of char under point.
  Whit this you can inspect the face to see what font the face is using."
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
                    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))
#+end_src

