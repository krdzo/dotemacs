#+title: DotEmacs
#+author: Krdzo
#+startup: fold

* Bootstrap
  
** Use better defaults
Source block for experiments
#+begin_src emacs-lisp
  (setq max-specpdl-size 10000
        max-lisp-eval-depth 5000)
  (setq comint-input-ignoredups t)
#+end_src

Change Emacs default UI.

#+begin_src emacs-lisp
  (when window-system
    (blink-cursor-mode 0)
    ;; (menu-bar-mode 0)
    (scroll-bar-mode 0)
    (tool-bar-mode 0))
#+end_src
   
These are emacs builtin options changed for what I think are better defaults.

#+begin_src emacs-lisp
  (setq-default
   auto-window-vscroll nil                          ; Lighten vertical scroll
   bidi-paragraph-direction 'left-to-right          ; For handling long lines see:https://www.youtube.com/watch?v=JJJlQejxn1k
   bidi-inhibit-bpa t
   confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
   delete-by-moving-to-trash t                      ; Delete files to trash
   display-time-default-load-average nil            ; Don't display load average
   fill-column 80                                   ; Set width for automatic line breaks
   help-window-select t                             ; Focus new help windows when opened
   hscroll-margin 4                    ; horizontal margin
   hscroll-step 1                                   ; Scroll one by one column and don't jump the point to center of screen
   indent-tabs-mode nil                             ; Stop using tabs to indent
   inhibit-startup-screen t                         ; Disable start-up screen
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   mouse-yank-at-point t                            ; Yank at point rather than pointer
   mouse-wheel-scroll-amount '(1)                   ; Scroll for mouse wheel
   save-interprogram-paste-before-kill t            ; Better interaction with clipboard
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   scroll-margin 4                                  ; Add a margin when scrolling vertically
   sentence-end-double-space nil                    ; End a sentence after a dot and a space
   show-trailing-whitespace nil                     ; Display trailing whitespaces
   tab-width 4                                      ; Set width for tabs
   uniquify-buffer-name-style 'forward              ; Uniquify buffer names
   x-stretch-cursor t)                              ; Stretch cursor to the glyph width
  ;; (cd "~/")                                         ; Move to the user directory
  (column-number-mode 1)                            ; Show coulum numbers in modeline
  (defalias 'yes-or-no-p 'y-or-n-p)                 ; Replace yes/no prompts with y/n
  (global-auto-revert-mode 1)                       ; Automatically update buffers if file content on the disk has changed.
  (global-subword-mode 1)                           ; Iterate through CamelCase words
  (prefer-coding-system 'utf-8)                     ; Default to utf-8 encoding
  (setf ring-bell-function 'ignore)                 ; Disable Emacs bell
  (show-paren-mode 1)                               ; Highlight matching parens
  (recentf-mode 1)                                  ; Save recently opened files
#+end_src

Enable fullscreen.

#+begin_src emacs-lisp
  (when window-system
    (add-to-list 'initial-frame-alist '(fullscreen . maximized)))
#+end_src

Folder for backup files

#+begin_src emacs-lisp
  (let ((backup (expand-file-name ".backups.d" user-emacs-directory)))
    (setq-default
     backup-directory-alist `(("." . ,backup))))
  (setq vc-make-backup-files t)
#+end_src

Garbage-collect on focus-out, Emacs should feel snappier.

#+begin_src emacs-lisp
  (add-hook 'focus-out-hook #'garbage-collect)
#+end_src

** Load .custom.el

One is able to use the customization interface that is bundled within Emacs. It is meant
to help people who are not familiar with Emacs Lisp in the configuration of Emacs
itself. By default, changes in the customization will be automatically detected and
appended at the end of the configuration file, init.el.

Since that in my case, the actual configuration file is a new one, crafted by org-mode,
adding code at the end of init.el might mess things up. The following tells Emacs to add
extra code in another file that would be then loaded, if existing.

#+begin_src emacs-lisp
  (setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** Hooks
Here are all the hooks that can't go in a specific use-package statment
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'toggle-truncate-lines)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'after-init-hook 'global-hl-line-mode)
#+end_src

** Changing some defaults
#+begin_src emacs-lisp
   (global-set-key (kbd "RET") 'newline-and-indent)
#+end_src

* Themes and UI

** Font

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font  "Source Code Pro 12")
#+end_src

** Themes

#+begin_src emacs-lisp
  (use-package idea-darkula-theme
    :defer t)
  (use-package zerodark-theme
    :defer t)
  (load-theme 'zerodark t)
  (add-hook 'after-init-hook 'zerodark-setup-modeline-format)
#+end_src

** Modeline
*** Diminish

This package alowes me to change what modes are listed in the modeline

#+begin_src emacs-lisp
  (use-package diminish
    :hook (after-init . my/diminish)
    :config
    (defun my/diminish ()
      (diminish 'eldoc-mode)
      (diminish 'subword-mode)
      (diminish 'evil-commentary-mode)
      (diminish 'evil-org-mode)
      (diminish 'which-key-mode)
      (diminish 'undo-tree-mode)))
#+end_src
    
* Modes
  
Here I put modes that I can't come up with a category for or are to important
to put them in the features section.

** Ediff

#+begin_src emacs-lisp
  (use-package ediff
    :defer t
    :ensure nil
    :config
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src

** General

#+begin_src emacs-lisp
  (use-package general
    :init
    (setq general-override-states '(insert
                                    emacs
                                    hybrid
                                    normal
                                    visual
                                    motion
                                    operator
                                    replace)))
  ;; we have to unbind SPC so that we dont encounter prefix key error when binding SPC as a prefix
  (general-unbind
    :states '(motion normal)
    "SPC")
  (general-def '(motion normal visual) 'global
    "gu" 'universal-argument)
#+end_src

** Selectrum and prescient

*** Selectrum

#+begin_src emacs-lisp
  (use-package selectrum
    :hook (after-init . selectrum-mode)
    :config
    (setq selectrum-count-style 'current/matches)
    (setq selectrum-fix-minibuffer-height 10)
    :general
    ('global
     "C-x C-z" 'selectrum-repeat)
    ('selectrum-minibuffer-map
     "<escape>" 'minibuffer-keyboard-quit
     "C-r" 'evil-paste-from-register
     "C-j" 'selectrum-next-candidate
     "C-k" 'selectrum-previous-candidate))
#+end_src

*** Prescient

Better sorting and filtering in selectrum and save usage statistics of modes
between Emacs sessions.

#+begin_src emacs-lisp
  (use-package prescient
    :after (:any selectrum company)
    :config
    (prescient-persist-mode 1))
  (use-package selectrum-prescient
    :after (prescient selectrum)
    :config
    (selectrum-prescient-mode 1))
#+end_src

** Consult and Embark
*** Consult
#+begin_src emacs-lisp
  (use-package consult
    :general
    ('global
     "C-h a" 'consult-apropos)
   ('(normal motion) 'global
     :prefix "SPC"
     "b b" 'consult-buffer))

  (use-package consult-selectrum
    :after (consult))
#+end_src

*** Embark
#+begin_src emacs-lisp
  (use-package embark
    :config
    ;; which-key integration
    ;; https://github.com/oantolin/embark/wiki/Additional-Configuration#use-which-key-like-a-key-menu-prompt
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator)
    :general
    ('minibuffer-local-map
     "M-m" 'embark-act)
    ('(emacs normal) 'embark-occur-mode-map
     "a" 'embark-act
     "h" 'helpful-at-point))
#+end_src

*** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :after (:any consult selectrum)
    :config
    (marginalia-mode 1)
    (setq marginalia-annotators '(marginalia-annotators-heavy
                                  marginalia-annotators-light)))
#+end_src

** Evil and friends
   
Evil and all asociated packages are configured in this section.

*** Evil

#+begin_src emacs-lisp
  (use-package evil
    :init (setq evil-want-C-u-scroll t
                evil-undo-system 'undo-fu
                evil-symbol-word-search t
                evil-want-keybinding nil
                evil-want-Y-yank-to-eol t)
    :config
    (evil-mode)
    ;; https://github.com/noctuid/evil-guide#whats-the-equivalent-of-nnoremap-n-nzz
    (advice-add 'evil-search-next :after #'evil-scroll-line-to-center)
    (advice-add 'evil-search-previous :after #'evil-scroll-line-to-center)
    (setq evil-motion-state-cursor "#bb1111"
          evil-normal-state-cursor "#26aaef"
          evil-emacs-state-cursor "#ee6622"
          evil-insert-state-cursor '(bar "#eeeeee"))
    (setq evil-search-module 'evil-search)
    :general
    ('normal 'global
    "gp" "`[v`]"
    "go" 'browse-url-at-point)
    ('emacs 'global
    "<excape>" 'evil-normal-state))
  ;; https://github.com/noctuid/evil-guide#binding-keys-to-keys-keyboard-macros
  ;; (general-def 'normal 'global
  ;;   ;; select the previously pasted text
  ;; (general-def 'emacs 'global
  ;;   "<escape>" 'evil-normal-state)
#+end_src

*** evil-anzu
Shows how many matches is in a search.

#+begin_src emacs-lisp
  (use-package evil-anzu
    :after evil
    :config
    (global-anzu-mode 1))
#+end_src

*** evil-commentary

#+begin_src emacs-lisp
  (use-package evil-commentary
    :after (evil)
    :config (evil-commentary-mode))
#+end_src

*** evil-collection

#+begin_src emacs-lisp
  (use-package evil-collection
    ;; :after (evil)
    :config
    (setq evil-collection-company-use-tng nil)
    (evil-collection-init '(comint
                            compile
                            dired
                            geiser
                            helpful
                            eshell
                            help 
                            info
                            magit
                            (term term ansi-term multi-term)
                            (package-menu package))))
#+end_src

*** evil-matchit

#+begin_src emacs-lisp
  (use-package evil-matchit
    :after (evil)
    :config
    (global-evil-matchit-mode 1))
#+end_src

*** evil-lion 
#+begin_src emacs-lisp
  (use-package evil-lion
    :after (evil)
    :config
    (evil-lion-mode))
#+end_src

*** evil-textobj-line

Select a line with =vil= and =val= keys.

#+begin_src emacs-lisp
  (use-package evil-textobj-line
    :after evil)

#+end_src

*** evil-goggles
#+begin_src emacs-lisp
  (use-package evil-goggles
    :after evil
    :config
    (setq evil-goggles-blocking-duration 0.100)
    (evil-goggles-mode))
#+end_src

*** evil-suround
#+begin_src emacs-lisp
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
#+end_src

*** evil-snipe

#+begin_src emacs-lisp
  (use-package evil-snipe
    :after evil
    :config
    (setq evil-snipe-repeat-scope 'visible)
    (evil-snipe-mode 1)
    (evil-snipe-override-mode 1))
#+end_src

*** evil-exchange
#+begin_src emacs-lisp
  (use-package evil-exchange
    :after evil
    :config (evil-exchange-install))
#+end_src

*** evil-numbers
#+begin_src emacs-lisp
  (use-package evil-numbers
    :general
    ('visual 'global
             "g +" 'evil-numbers/inc-at-pt
             "g =" 'evil-numbers/inc-at-pt
             "g -" 'evil-numbers/dec-at-pt)
    ('normal 'global
             "g +" 'evil-numbers/inc-at-pt
             "g =" 'evil-numbers/inc-at-pt
             "g -" 'evil-numbers/dec-at-pt))

#+end_src

*** undo-fu
#+begin_src emacs-lisp
  (use-package undo-fu
    :after (evil))
#+end_src



*** /Disabled packages/
**** evil-quickscope
[[https://github.com/blorbx/evil-quickscope/][Link to evil-quickscope]] it's disabled because it's in conflict with evil-snipe.
Only one can work at a time if I figure out how to enable both then I will enable this mode.
#+begin_src emacs-lisp
  ;; (use-package evil-quickscope
  ;;   :disabled t
  ;;   :after evil
  ;;   :config
  ;;   (global-evil-quickscope-mode 1))
#+end_src

**** evil-visualstar
The * and # operators don't work as they should with this package.
#+begin_src emacs-lisp
  ;; (use-package evil-visualstar
  ;;   :disabled t
  ;;   :after (evil))
#+end_src

* Features

** Auto-Completion

Company mode for autocompletion

#+begin_src emacs-lisp
  ;; hack for mit-scheme because comapny lags typing
  (defun kr/company-for-comint ()
    (interactive)
    (set (make-local-variable 'company-idle-delay) 0.35))

  (defun kr/company-for-text ()
    (interactive)
    (set (make-local-variable 'company-idle-delay) 0.3)
    (set (make-local-variable 'company-minimum-prefix-length) 3))

  (defun kr/company-for-prog ()
    (interactive)
    (set (make-local-variable 'company-idle-delay) 0.0)
    (set (make-local-variable 'company-minimum-prefix-length) 1))

  (use-package company
    :hook (after-init . global-company-mode)
    :config

    (add-hook 'text-mode-hook 'kr/company-for-text)
    ;; (add-hook 'scheme-mode-hook 'kr/company-for-mit)
    (add-hook 'comint-mode-hook 'kr/company-for-comint)
    (setq company-idle-delay 0.0
          company-minimum-prefix-length 1
          company-selection-wrap-around t
          company-global-modes '(not help-mode
                                     gud-mode
                                     helpful-mode)))
  ;; (evil-make-overriding-map company-active-map 'insert t)
#+end_src

*** Company prescient
#+begin_src emacs-lisp
  (use-package company-prescient
      :after (prescient company)
      :config (company-prescient-mode 1))
#+end_src

** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :defer t)
#+end_src

** Git
   
#+begin_src emacs-lisp
  (use-package magit
    :general
    ('global
     "C-x g" 'magit-status))
#+end_src
   
** Help 

#+begin_quote
Helpful is an alternative to the built-in Emacs help that provides much more contextual information.
[[https://github.com/Wilfred/helpful][Helpful github page]]
#+end_quote

#+begin_src emacs-lisp
  (use-package helpful
    :general
    ('global
      "C-h k" 'helpful-key
      "C-h o" 'helpful-symbol
      "C-h C" 'helpful-command
      "C-h f" 'helpful-callable
      "C-h v" 'helpful-variable))
#+end_src

#+begin_src emacs-lisp
  (use-package elisp-demos
    :after (helpful)
    :config
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src

** Language

#+begin_src emacs-lisp
  (use-package define-word
    :commands (define-word define-word-at-point))
#+end_src

** Reload/open .emacs

Function for reloading configuration

#+begin_src emacs-lisp
  (defun my/config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "pravila.org" user-emacs-directory)))
#+end_src

Function for opening pravila.org

#+begin_src emacs-lisp
  (defun my/edit-config-org ()
    (interactive)
    (find-file (expand-file-name "pravila.org" user-emacs-directory )))
#+end_src

Functon for opening init.el

#+begin_src emacs-lisp
  (defun my/edit-config-init ()
    (interactive)
    (find-file (expand-file-name "init.el" user-emacs-directory)))
#+end_src

Keybindings for these functions

#+begin_src emacs-lisp
  (general-def '(motion normal) 'global
    :prefix "SPC f e"
    "r" 'my/config-reload
    "d" 'my/edit-config-org
    "i" 'my/edit-config-init)
#+end_src

** Try

Package for trying out different packages

#+begin_src emacs-lisp
  (use-package try
    :commands (try))
#+end_src

** Org

#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-startup-indented t
          org-return-follows-link t
          org-src-window-setup 'current-window))

  (use-package toc-org
    :after org)
#+end_src
   
*** evil-org
#+begin_src emacs-lisp
  (use-package evil-org
    :hook (org-mode . evil-org-mode)
    :after (evil org)
    :config
    (setq evil-org-retain-visual-state-on-shift t)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme '(navigation
                                          return
                                          insert
                                          textobjects
                                          additional
                                          calendar))))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

*** Custom Org snipets
    
For emacs-lisp
#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
#+end_src

** Parentheses
   
Highlight parenthese-like delimiters in a rainbow fashion. It ease the reading when dealing with mismatched parentheses.
   
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((prog-mode comint-mode) . rainbow-delimiters-mode))
#+end_src
  
Smartparens for better paren handling, and everything that goes in pairs.
   
#+begin_src emacs-lisp
  ;; (use-package smartparens
  ;;   :ensure t
  ;;   :diminish
  ;;   :hook (prog-mode . smartparens-mode)
  ;;   :config
  ;;   (sp-local-pair '(emacs-lisp-mode lisp-interaction-mode inferior-emacs-lisp-mode) "'" "")
  ;;   (sp-local-pair '(emacs-lisp-mode lisp-interaction-mode inferior-emacs-lisp-mode) "`" ""))
#+end_src
#+begin_src emacs-lisp
  ;; just here for the time being
  ;; needs to be faktored
  (add-hook 'prog-mode-hook 'electric-pair-local-mode)
#+end_src
   
** Which-key
   
Which-key is used for easier keybindings discovery

#+begin_src emacs-lisp
  (use-package which-key
    :hook (after-init . which-key-mode)
    :config
    (setq which-key-idle-delay 0.5))
#+end_src

* Programming
** LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init (setq lsp-keymap-prefix "C-l")
    :commands (lsp lsp-defered)
    :hook
    (python-mode . lsp)
    (lsp-mode . lsp-enable-which-key-integration)
    :general
    ('normal 'lsp-mode
             :definer 'minor-mode
             "SPC l" (general-simulate-key "C-c l" :which-key "lsp")))

  (use-package lsp-python-ms
    :ensure t
    :commands python-mode)

  (use-package yasnippet
    :defer t) ;; privremeno ovde dok neukapiram sta da radim sa ovim
#+end_src

** Languages
*** Python
#+begin_src emacs-lisp
  ;; (use-package python
  ;;   :defer t
  ;;   :config)
#+end_src
    
*** Scheme
#+begin_src emacs-lisp
  (use-package geiser
    :defer t
    :init
    (setq geiser-active-implementations '(mit))
    :config
    (advice-add 'geiser-repl--maybe-send :after #'evil-normal-state)
    (setq geiser-mit--prompt-regexp "[0-9]+ \\(([^)]+)\\|[A-z]+\\) \\(=>\\|>\\)"))
#+end_src

** Lisp

#+begin_src emacs-lisp
  (use-package inf-lisp
    :ensure nil
    :defer t
    :config
    (setq inferior-lisp-program "sbcl"))
#+end_src
**** SLIME
#+begin_src emacs-lisp
  (use-package slime)
#+end_src

* Keybindings
** Junk that needs to be sorted
#+begin_src emacs-lisp
  (general-def 'global
    "C-h p" 'describe-package
    "C-h P" 'finder-by-keyword
    "C-h l" 'find-library)
#+end_src

** Buffers
Custom funcions used in this section for bindings
#+begin_src emacs-lisp
    (defun kr/edit-scratch ()
      (interactive)
      (switch-to-buffer "*scratch*"))

  (defun my/bury-other-buffer ()
    (interactive)
    (save-excursion
      (other-window 1)
      (bury-buffer)
      (other-window 1)))


#+end_src
   
#+begin_src emacs-lisp
  (general-def  '(motion normal) 'global
    :prefix "SPC b"
    "" '(:ignore t :which-key "buffer")
    "s" 'kr/edit-scratch
    "d" 'kill-current-buffer
    "o" 'my/bury-other-buffer)
#+end_src

** Company   

#+begin_src emacs-lisp
  ;; there is a bug when you have company completion and hit C-h
  ;; (company-show-doc-buffer). If the next comand is C-k then insert-state takes
  ;; that comand and runs evil-inser-digraph function insted of company-active-map
  ;; so we have to unbind C-k in insert state
  (general-unbind 'insert 'global
    "C-k")
  (general-def 'company-active-map
     "<tab>" 'company-complete-common-or-cycle
     "C-n" 'company-select-next-or-abort
     "C-p" 'company-select-previous-or-abort
     "C-j" 'company-select-next-or-abort
     "C-k" 'company-select-previous-or-abort
     "M-j" 'company-select-next
     "M-k" 'company-select-previous
     "<f1>" 'helpful-key)
#+end_src

** Dired mode
#+begin_src emacs-lisp
  (general-unbind normal dired-mode-map "SPC")
#+end_src

** Files
#+begin_src emacs-lisp
  (general-def '(motion normal) 'global
    :prefix "SPC f"
    "" '(:ignore t :which-key "file")
    "f" 'find-file
    "s" 'save-buffer)
#+end_src
   
** Help and Helpful

Help
#+begin_src emacs-lisp
  (general-unbind normal help-mode-map "SPC")
#+end_src

Helpful
#+begin_src emacs-lisp
  (general-def 'global
    "C-h k" 'helpful-key
    "C-h C" 'helpful-command
    "C-h f" 'helpful-callable
    "C-h v" 'helpful-variable)
#+end_src

** Info mode
#+begin_src emacs-lisp
  (general-unbind normal Info-mode-map "SPC")
  (general-def normal Info-mode-map
    "<up>" '(lambda () (interactive) (evil-scroll-line-up 1) (evil-previous-line))
    "<down>" '(lambda () (interactive) (evil-scroll-line-down 1) (evil-next-line))
    "SPC SPC" 'Info-scroll-up
    "S-<backspace>" 'Info-scroll-up)
#+end_src

** Scheme(geiser) mode
#+begin_src emacs-lisp
  ;; (general-def normal geiser-mode-map
  ;;   "SPC '" 'switch-to-geiser)
  (general-def 'normal 'geiser-mode-map
    "gr" 'geiser-eval-definition)

  (general-def 'normal 'geiser-repl-mode-map
    "gz" 'switch-to-geiser)
  ;;   "SPC '" 'switch-to-geiser)

  (general-def 'normal 'geiser-doc-mode-map
    "q" 'View-quit)

#+end_src

** Windows
#+begin_src emacs-lisp
  (general-def '(motion normal) 'global
    "]w" 'evil-window-next
    "[w" 'evil-window-prev)

  (general-def '(motion normal) 'global
    :prefix "SPC w"
    "" '(:ignore t :which-key "window")
    "d" 'evil-window-delete
    "c" 'evil-window-delete
    "v" 'evil-window-vsplit
    "s" 'evil-window-split
    "o" 'delete-other-windows)
#+end_src

** org
#+begin_src emacs-lisp
  ;; glupost za koju sam napisao kad sam hteo da ucim org mode ali sam zaboravio
  ;; sta radi
  ;; (general-def 'normal
  ;;   :prefix "SPC o"
  ;;   "l" 'org-store-link
  ;;   "a" 'org-agenda
  ;;   "c" 'org-capture)

  (general-def 'normal org-mode-map
    "RET" 'org-return
    "gz" 'org-edit-special
    "j" 'evil-next-visual-line
    "k" 'evil-previous-visual-line)
  ;; https://github.com/noctuid/general.el#wrapping-evil-define-minor-mode-key
  (general-def
    :definer 'minor-mode
    :states 'normal
    :keymaps 'org-src-mode
    "gZ" 'org-edit-src-abort
    "gz" 'org-edit-src-exit)
#+end_src

** comint
#+begin_src emacs-lisp
  ;; (general-def 'normal 'comint-mode-map
  ;;   "O" 'comint-goto-process-mark) 

  ;; (general-def 'insert 'comint-mode-map
  ;;   "C-n" 'comint-next-input
  ;;   "C-p" 'comint-previous-input)
#+end_src

* Hydra

#+begin_src emacs-lisp
  (use-package hydra
    :defer t)
#+end_src



* Podsetnik za Info
** Korisne komande i promenive koje treba znati
+ ~(list-command-history)~ - izlistava istoriju komandi. Komande su izlistane
  detaljno tj. sa svim argumentima itd.
+ =C-x <ESC> <ESC>= ~(repeat-complex-command)~ - daje mogućnost da ponoviš poslednju
  komandu sa promenjenim ili istim argumentima.
+ ~(apropos-user-option)~ - Search for user-customizable variables.  With a prefix 
  argument, search for non-customizable variables too.
+ ~(apropos-variable)~ - Search for variables.  With a prefix argument, search for
  customizable variables only.
+ ~show-trailing-whitespace~ - promenjiva, ono sto ime kaže
  

BUR_REPORT: Postoji bug u evil-matchit-mode -u koji neda da se macuju zagrade u org tekstu

** Preskoceno u Emacs Info manual-u
- 11. 12. 13. 17. 22. sekcije Emacs info manual-a su preskočene
- 28.1 tj. VC je letimično pročitan zato sto
  koristim magit ali možda ima nesto pametno da se pročita.
- 28.4.2 i 28.4.3 TAGS preskočen
- 28.6 Emerge preskočen
- 30. Dired preskočen
- 31. 32. 33. 34. preskočeni
- 37. Document viewing preskočen
- 38. do 47. preskočeno
- 49.3.10. i 49.3.11. preskočeno
  

** Korisne Info strane da se opet procitaju
16.4 O spellcheck-u 
26.2.3 imunu
26.2.4 which-funciton-mode
49.3.4 minibuffer keymap kad se bude customizovao minibufer

** Kako lakše raditi sa camelCase i snake_case 
Postavi global sub word
(global-subword-mode 1)
Sad se =w= komanda kao i sve ostale ponašaju drugačije tj prepoznaju reči u camelcase i razlikuju ih.

vidiSadKakoSePonasaNaOvomPrimeru
vidi_sad_kako_se_ponasa_na_ovom_primeru

onda sa =vaw= ili =viw= opkoliš reč unutar camelcase-a a sa =vao= ili =vio= opkolis ceo simbol, celu promenjivu

- vidi /superword-mode/ Info emacs 26.11

  
** Org mode info
Strane koje vrede ponovo pročitati
- 2.2.3 strana
- 3.6 intresting org plot
  
* Note
Dobre stvari koje sam nasao kad sam se igrao sa emacsom ali nisam uspeo tada da ih konfigurisem.
** Consult
[[https://github.com/minad/consult][Link za Consult]] gde moze da se vidi dokumentacija.
=consult-command-history= - korisna komanda


